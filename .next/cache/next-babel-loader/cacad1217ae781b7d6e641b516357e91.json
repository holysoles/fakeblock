{"ast":null,"code":"import axios from 'axios';\nimport React from \"react\";\nimport fetch from \"node-fetch\";\nexport default async function GetPosts(page) {\n  let postsArray = []; //get facebook id\n\n  const fbID = '211313118876';\n  const jsonUrl = 'https://www.facebook.com/pages_reaction_units/more/?'; //timeline cursor appears to set where posts get request starts from\n\n  const timelineCursor = \"%7B%22timeline_cursor%22%3A%22AQHRoDgKgwnQmRz8-7LyXTbs8467llbU4E2FkvBASG8-CkOTDUtCxL2Rbx\" + \"_u0_cGtwwSP-aOXMsTVCNr62TMoNdjl0EmuzWGBCNQrxeyKxMb4hQQMNqhGGJtLN8VYY5vIYUR%22%2C%22timeline_section_cursor%22\" + \"%3Anull%2C%22has_next_page%22%3Atrue%7D\";\n  const params = {\n    'surface': 'www_pages_posts',\n    'unit_count': '4',\n    //sets how many posts to get\n    '__a': '1'\n  };\n  var opts = {\n    method: 'GET',\n    redirect: 'follow'\n  };\n  const fullUrl = jsonUrl + 'page_id=' + fbID + \"&cursor=\" + timelineCursor + '&' + new URLSearchParams(params); //fetch(fullUrl, opts).then(response => response.text()).then(rawRes => {})\n\n  const res = await fetch(fullUrl, opts);\n  const newJson = res.body().json();\n  console.log(newJson); //need to get html updates from json response\n\n  const rawJson = rawRes.replace(\"for (;;);\", \"\");\n  const postsJson = JSON.parse(rawJson);\n  const rawHtml = postsJson.domops[0][3].__html; //construct doc from rawhtml and get post wrapper elements into html collection\n\n  const postsDoc = document.createElement('html');\n  postsDoc.innerHTML = rawHtml; //const postWrappers = postsDoc.getElementsByClassName(\"_5pcr userContentWrapper\");\n\n  for (let i = 0; i < postWrappers.length; i++) {\n    //let postWrapper = postWrappers.item(1);\n    const postParagraphs = postsDoc.querySelectorAll(\"div[data-testid='post_message']\").item(i).getElementsByTagName('p');\n    let post = [];\n\n    for (let j = 0; j < postParagraphs; j++) {\n      post.push(postParagraphs[i]).textContent;\n    }\n\n    postsArray.push(post);\n  }\n\n  if (postsArray.length > 0) {\n    console.log(\"returning postsArray\");\n    return [postsArray];\n  } else {\n    return [];\n  }\n}","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/components/Business/GetPosts.js"],"names":["axios","React","fetch","GetPosts","page","postsArray","fbID","jsonUrl","timelineCursor","params","opts","method","redirect","fullUrl","URLSearchParams","res","newJson","body","json","console","log","rawJson","rawRes","replace","postsJson","JSON","parse","rawHtml","domops","__html","postsDoc","document","createElement","innerHTML","i","postWrappers","length","postParagraphs","querySelectorAll","item","getElementsByTagName","post","j","push","textContent"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,eAAe,eAAeC,QAAf,CAAwBC,IAAxB,EAA6B;AAExC,MAAIC,UAAU,GAAG,EAAjB,CAFwC,CAGxC;;AACA,QAAMC,IAAI,GAAG,cAAb;AAEA,QAAMC,OAAO,GAAG,sDAAhB,CANwC,CAOxC;;AACA,QAAMC,cAAc,GAAG,6FACnB,+GADmB,GAEnB,yCAFJ;AAGA,QAAMC,MAAM,GAAG;AACX,eAAW,iBADA;AAEX,kBAAc,GAFH;AAEQ;AACnB,WAAO;AAHI,GAAf;AAKA,MAAIC,IAAI,GAAG;AACPC,IAAAA,MAAM,EAAE,KADD;AAEPC,IAAAA,QAAQ,EAAE;AAFH,GAAX;AAIA,QAAMC,OAAO,GAAGN,OAAO,GAAE,UAAT,GAAqBD,IAArB,GAA2B,UAA3B,GAAuCE,cAAvC,GAAuD,GAAvD,GAA4D,IAAIM,eAAJ,CAAoBL,MAApB,CAA5E,CApBwC,CAqBxC;;AAEA,QAAMM,GAAG,GAAG,MAAMb,KAAK,CAACW,OAAD,EAASH,IAAT,CAAvB;AACA,QAAMM,OAAO,GAAGD,GAAG,CAACE,IAAJ,GAAWC,IAAX,EAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAzBwC,CA2BxC;;AACA,QAAMK,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAe,WAAf,EAA2B,EAA3B,CAAhB;AACA,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWL,OAAX,CAAlB;AACA,QAAMM,OAAO,GAAGH,SAAS,CAACI,MAAV,CAAiB,CAAjB,EAAoB,CAApB,EAAuBC,MAAvC,CA9BwC,CA+BxC;;AACA,QAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAwB,MAAxB,CAAjB;AACAF,EAAAA,QAAQ,CAACG,SAAT,GAAqBN,OAArB,CAjCwC,CAkCxC;;AACA,OAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGC,YAAY,CAACC,MAAhC,EAAwCF,CAAC,EAAzC,EAA6C;AACzC;AACA,UAAMG,cAAc,GAAGP,QAAQ,CAACQ,gBAAT,CAA0B,iCAA1B,EAA6DC,IAA7D,CAAkEL,CAAlE,EAAqEM,oBAArE,CAA2F,GAA3F,CAAvB;AACA,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGL,cAAjB,EAAiCK,CAAC,EAAlC,EAAqC;AACjCD,MAAAA,IAAI,CAACE,IAAL,CAAUN,cAAc,CAACH,CAAD,CAAxB,EAA6BU,WAA7B;AACH;;AACDvC,IAAAA,UAAU,CAACsC,IAAX,CAAgBF,IAAhB;AACH;;AAMD,MAAGpC,UAAU,CAAC+B,MAAX,GAAoB,CAAvB,EAA0B;AACtBjB,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,WAAO,CAACf,UAAD,CAAP;AACH,GAHD,MAII;AACA,WAAO,EAAP;AACH;AACJ","sourcesContent":["import axios from 'axios';\r\nimport React from \"react\";\r\nimport fetch from \"node-fetch\";\r\n\r\nexport default async function GetPosts(page){\r\n\r\n    let postsArray = [];\r\n    //get facebook id\r\n    const fbID = '211313118876';\r\n\r\n    const jsonUrl = 'https://www.facebook.com/pages_reaction_units/more/?';\r\n    //timeline cursor appears to set where posts get request starts from\r\n    const timelineCursor = \"%7B%22timeline_cursor%22%3A%22AQHRoDgKgwnQmRz8-7LyXTbs8467llbU4E2FkvBASG8-CkOTDUtCxL2Rbx\" +\r\n        \"_u0_cGtwwSP-aOXMsTVCNr62TMoNdjl0EmuzWGBCNQrxeyKxMb4hQQMNqhGGJtLN8VYY5vIYUR%22%2C%22timeline_section_cursor%22\" +\r\n        \"%3Anull%2C%22has_next_page%22%3Atrue%7D\";\r\n    const params = {\r\n        'surface': 'www_pages_posts',\r\n        'unit_count': '4', //sets how many posts to get\r\n        '__a': '1'\r\n    };\r\n    var opts = {\r\n        method: 'GET',\r\n        redirect: 'follow'\r\n    };\r\n    const fullUrl = jsonUrl +'page_id='+ fbID +\"&cursor=\"+ timelineCursor +'&'+ new URLSearchParams(params);\r\n    //fetch(fullUrl, opts).then(response => response.text()).then(rawRes => {})\r\n\r\n    const res = await fetch(fullUrl,opts);\r\n    const newJson = res.body().json();\r\n    console.log(newJson);\r\n\r\n    //need to get html updates from json response\r\n    const rawJson = rawRes.replace(\"for (;;);\",\"\");\r\n    const postsJson = JSON.parse(rawJson);\r\n    const rawHtml = postsJson.domops[0][3].__html;\r\n    //construct doc from rawhtml and get post wrapper elements into html collection\r\n    const postsDoc = document.createElement( 'html' );\r\n    postsDoc.innerHTML = rawHtml;\r\n    //const postWrappers = postsDoc.getElementsByClassName(\"_5pcr userContentWrapper\");\r\n    for(let i = 0; i < postWrappers.length; i++) {\r\n        //let postWrapper = postWrappers.item(1);\r\n        const postParagraphs = postsDoc.querySelectorAll(\"div[data-testid='post_message']\").item(i).getElementsByTagName( 'p');\r\n        let post = [];\r\n        for(let j=0; j < postParagraphs; j++){\r\n            post.push(postParagraphs[i]).textContent;\r\n        }\r\n        postsArray.push(post);\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    if(postsArray.length > 0) {\r\n        console.log(\"returning postsArray\");\r\n        return [postsArray]\r\n    }\r\n    else{\r\n        return []\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}