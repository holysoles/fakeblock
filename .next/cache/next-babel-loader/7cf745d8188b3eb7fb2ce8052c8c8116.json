{"ast":null,"code":"import React from \"react\";\nimport fetch from \"node-fetch\";\nimport { Headers } from \"node-fetch\";\nimport GetFBID from \"../GetFBID\";\nexport default async function GetPosts(page) {\n  const jsdom = require(\"jsdom\");\n\n  const {\n    JSDOM\n  } = jsdom;\n  const dom = new JSDOM();\n  const document = dom.window.document;\n  let postsArray = [];\n  const fbID = await GetFBID(page);\n  console.log(\"got id, moving on\");\n  const jsonUrl = 'https://www.facebook.com/pages_reaction_units/more/?'; //timeline cursor appears to set where posts get request starts from\n\n  const timelineCursor = \"%7B%22timeline_cursor%22%3A%22AQHRoDgKgwnQmRz8-7LyXTbs8467llbU4E2FkvBASG8-CkOTDUtCxL2Rbx\" + \"_u0_cGtwwSP-aOXMsTVCNr62TMoNdjl0EmuzWGBCNQrxeyKxMb4hQQMNqhGGJtLN8VYY5vIYUR%22%2C%22timeline_section_cursor%22\" + \"%3Anull%2C%22has_next_page%22%3Atrue%7D\";\n  const params = {\n    'surface': 'www_pages_posts',\n    'unit_count': '4',\n    //sets how many posts to get\n    '__a': '1'\n  };\n  const headers = new Headers({\n    'User-Agent': \"PostmanRuntime/7.24.1\"\n  });\n  const opts = {\n    method: 'GET',\n    headers: headers,\n    redirect: 'follow'\n  };\n  const fullUrl = jsonUrl + 'page_id=' + fbID + \"&cursor=\" + timelineCursor + '&' + new URLSearchParams(params); //fetch(fullUrl, opts).then(response => response.text()).then(rawRes => {})\n\n  const res = await fetch(fullUrl, opts);\n\n  if (res.ok) {\n    console.log(\"response okay\"); //console.log(res)\n    //need to get html updates from json response\n\n    const resText = await res.text();\n    const rawJson = resText.replace(\"for (;;);\", \"\");\n    const postsJson = JSON.parse(rawJson);\n    const rawHtml = postsJson.domops[0][3].__html; //construct doc from raw html string and get post wrapper elements into html collection\n\n    const postsDoc = document.createElement('html');\n    postsDoc.innerHTML = rawHtml; //get posts elements from html doc\n\n    const postWrappers = postsDoc.getElementsByClassName(\"_5pcr userContentWrapper\"); //const postMessages = postsDoc.querySelectorAll(\"div[data-testid='post_message']\");\n\n    console.log(\"how many post containers: \", postWrappers.length);\n\n    for (let i = 0; i < postWrappers.length; i++) {\n      let post = {\n        user: '',\n        timestamp: '',\n        text: [],\n        img: []\n      };\n      const postImages = postWrappers[i].getElementsByTagName('img');\n      const postParagraphs = postWrappers[i].getElementsByTagName('p'); //get username name and timestamp from post\n\n      const username = postWrappers[i].getElementsByClassName('fwb fcg').item(0);\n      console.log(username);\n      const timestamp = postWrappers[i].getElementsByClassName('timestampContent')[0].textContent;\n      post.timestamp = timestamp; //if post has paragraphs, iterate over each and push to text array in post object\n\n      for (let j = 0; j < postParagraphs.length; j++) {\n        post.text.push(postParagraphs[j].textContent);\n      } //if post has images, iterate over each and push to image array in post object\n\n\n      if (postImages.length > 0) {\n        for (let k = 0; k < postImages.length; k++) {\n          const image = postImages.item(k);\n          const imagesToIgnore = \"Image may contain: possible text that says 'Shop Now'\";\n\n          if (image.getAttribute('alt') !== imagesToIgnore) {\n            post.img.push(image.getAttribute('src'));\n          }\n        }\n      }\n\n      postsArray.push(post);\n    }\n\n    console.log(\"returning postsArray\");\n    return postsArray;\n  } else {\n    console.log(\"response failed\");\n    return [];\n  }\n}","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/components/Business/GetPosts.js"],"names":["React","fetch","Headers","GetFBID","GetPosts","page","jsdom","require","JSDOM","dom","document","window","postsArray","fbID","console","log","jsonUrl","timelineCursor","params","headers","opts","method","redirect","fullUrl","URLSearchParams","res","ok","resText","text","rawJson","replace","postsJson","JSON","parse","rawHtml","domops","__html","postsDoc","createElement","innerHTML","postWrappers","getElementsByClassName","length","i","post","user","timestamp","img","postImages","getElementsByTagName","postParagraphs","username","item","textContent","j","push","k","image","imagesToIgnore","getAttribute"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,eAAe,eAAeC,QAAf,CAAwBC,IAAxB,EAA6B;AACxC,QAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYF,KAAlB;AACA,QAAMG,GAAG,GAAG,IAAID,KAAJ,EAAZ;AACA,QAAME,QAAQ,GAAGD,GAAG,CAACE,MAAJ,CAAWD,QAA5B;AACA,MAAIE,UAAU,GAAG,EAAjB;AAEA,QAAMC,IAAI,GAAG,MAAMV,OAAO,CAACE,IAAD,CAA1B;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,QAAMC,OAAO,GAAG,sDAAhB,CATwC,CAUxC;;AACA,QAAMC,cAAc,GAAG,6FACnB,+GADmB,GAEnB,yCAFJ;AAGA,QAAMC,MAAM,GAAG;AACX,eAAW,iBADA;AAEX,kBAAc,GAFH;AAEQ;AACnB,WAAO;AAHI,GAAf;AAKA,QAAMC,OAAO,GAAG,IAAIjB,OAAJ,CAAY;AAAC,kBAAc;AAAf,GAAZ,CAAhB;AACA,QAAMkB,IAAI,GAAG;AACTC,IAAAA,MAAM,EAAE,KADC;AAETF,IAAAA,OAAO,EAAEA,OAFA;AAGTG,IAAAA,QAAQ,EAAE;AAHD,GAAb;AAKA,QAAMC,OAAO,GAAGP,OAAO,GAAE,UAAT,GAAqBH,IAArB,GAA2B,UAA3B,GAAuCI,cAAvC,GAAuD,GAAvD,GAA4D,IAAIO,eAAJ,CAAoBN,MAApB,CAA5E,CAzBwC,CA0BxC;;AAEA,QAAMO,GAAG,GAAG,MAAMxB,KAAK,CAACsB,OAAD,EAASH,IAAT,CAAvB;;AACA,MAAGK,GAAG,CAACC,EAAP,EAAU;AACNZ,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EADM,CAEN;AACA;;AACA,UAAMY,OAAO,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAtB;AACA,UAAMC,OAAO,GAAGF,OAAO,CAACG,OAAR,CAAgB,WAAhB,EAA4B,EAA5B,CAAhB;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAlB;AACA,UAAMK,OAAO,GAAGH,SAAS,CAACI,MAAV,CAAiB,CAAjB,EAAoB,CAApB,EAAuBC,MAAvC,CAPM,CAQN;;AACA,UAAMC,QAAQ,GAAG3B,QAAQ,CAAC4B,aAAT,CAAwB,MAAxB,CAAjB;AACAD,IAAAA,QAAQ,CAACE,SAAT,GAAqBL,OAArB,CAVM,CAWN;;AACA,UAAMM,YAAY,GAAGH,QAAQ,CAACI,sBAAT,CAAgC,0BAAhC,CAArB,CAZM,CAaN;;AAEA3B,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAAyCyB,YAAY,CAACE,MAAtD;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,YAAY,CAACE,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;AACzC,UAAIC,IAAI,GAAG;AAACC,QAAAA,IAAI,EAAE,EAAP;AAAWC,QAAAA,SAAS,EAAE,EAAtB;AAA0BlB,QAAAA,IAAI,EAAC,EAA/B;AAAmCmB,QAAAA,GAAG,EAAE;AAAxC,OAAX;AACA,YAAMC,UAAU,GAAGR,YAAY,CAACG,CAAD,CAAZ,CAAgBM,oBAAhB,CAAqC,KAArC,CAAnB;AACA,YAAMC,cAAc,GAAGV,YAAY,CAACG,CAAD,CAAZ,CAAgBM,oBAAhB,CAAsC,GAAtC,CAAvB,CAHyC,CAKzC;;AACA,YAAME,QAAQ,GAAGX,YAAY,CAACG,CAAD,CAAZ,CAAgBF,sBAAhB,CAAuC,SAAvC,EAAkDW,IAAlD,CAAuD,CAAvD,CAAjB;AACAtC,MAAAA,OAAO,CAACC,GAAR,CAAYoC,QAAZ;AAEA,YAAML,SAAS,GAAGN,YAAY,CAACG,CAAD,CAAZ,CAAgBF,sBAAhB,CAAuC,kBAAvC,EAA2D,CAA3D,EAA8DY,WAAhF;AACAT,MAAAA,IAAI,CAACE,SAAL,GAAiBA,SAAjB,CAVyC,CAYzC;;AACA,WAAI,IAAIQ,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGJ,cAAc,CAACR,MAAhC,EAAwCY,CAAC,EAAzC,EAA4C;AACxCV,QAAAA,IAAI,CAAChB,IAAL,CAAU2B,IAAV,CAAeL,cAAc,CAACI,CAAD,CAAd,CAAkBD,WAAjC;AACH,OAfwC,CAgBzC;;;AACA,UAAGL,UAAU,CAACN,MAAX,GAAoB,CAAvB,EAAyB;AACrB,aAAI,IAAIc,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAGR,UAAU,CAACN,MAA5B,EAAoCc,CAAC,EAArC,EAAwC;AACpC,gBAAMC,KAAK,GAAGT,UAAU,CAACI,IAAX,CAAgBI,CAAhB,CAAd;AACA,gBAAME,cAAc,GAAG,uDAAvB;;AACA,cAAGD,KAAK,CAACE,YAAN,CAAmB,KAAnB,MAA6BD,cAAhC,EAA+C;AAC3Cd,YAAAA,IAAI,CAACG,GAAL,CAASQ,IAAT,CAAcE,KAAK,CAACE,YAAN,CAAmB,KAAnB,CAAd;AACH;AACJ;AACJ;;AACD/C,MAAAA,UAAU,CAAC2C,IAAX,CAAgBX,IAAhB;AACH;;AACD9B,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,WAAOH,UAAP;AACH,GA9CD,MA+CI;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAO,EAAP;AACH;AACJ","sourcesContent":["import React from \"react\";\r\nimport fetch from \"node-fetch\"\r\nimport {Headers} from \"node-fetch\";\r\nimport GetFBID from \"../GetFBID\";\r\n\r\nexport default async function GetPosts(page){\r\n    const jsdom = require(\"jsdom\");\r\n    const { JSDOM } = jsdom;\r\n    const dom = new JSDOM();\r\n    const document = dom.window.document;\r\n    let postsArray = [];\r\n\r\n    const fbID = await GetFBID(page);\r\n    console.log(\"got id, moving on\");\r\n    const jsonUrl = 'https://www.facebook.com/pages_reaction_units/more/?';\r\n    //timeline cursor appears to set where posts get request starts from\r\n    const timelineCursor = \"%7B%22timeline_cursor%22%3A%22AQHRoDgKgwnQmRz8-7LyXTbs8467llbU4E2FkvBASG8-CkOTDUtCxL2Rbx\" +\r\n        \"_u0_cGtwwSP-aOXMsTVCNr62TMoNdjl0EmuzWGBCNQrxeyKxMb4hQQMNqhGGJtLN8VYY5vIYUR%22%2C%22timeline_section_cursor%22\" +\r\n        \"%3Anull%2C%22has_next_page%22%3Atrue%7D\";\r\n    const params = {\r\n        'surface': 'www_pages_posts',\r\n        'unit_count': '4', //sets how many posts to get\r\n        '__a': '1'\r\n    };\r\n    const headers = new Headers({'User-Agent': \"PostmanRuntime/7.24.1\"});\r\n    const opts = {\r\n        method: 'GET',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n    };\r\n    const fullUrl = jsonUrl +'page_id='+ fbID +\"&cursor=\"+ timelineCursor +'&'+ new URLSearchParams(params);\r\n    //fetch(fullUrl, opts).then(response => response.text()).then(rawRes => {})\r\n\r\n    const res = await fetch(fullUrl,opts);\r\n    if(res.ok){\r\n        console.log(\"response okay\")\r\n        //console.log(res)\r\n        //need to get html updates from json response\r\n        const resText = await res.text();\r\n        const rawJson = resText.replace(\"for (;;);\",\"\");\r\n        const postsJson = JSON.parse(rawJson);\r\n        const rawHtml = postsJson.domops[0][3].__html;\r\n        //construct doc from raw html string and get post wrapper elements into html collection\r\n        const postsDoc = document.createElement( 'html' );\r\n        postsDoc.innerHTML = rawHtml;\r\n        //get posts elements from html doc\r\n        const postWrappers = postsDoc.getElementsByClassName(\"_5pcr userContentWrapper\");\r\n        //const postMessages = postsDoc.querySelectorAll(\"div[data-testid='post_message']\");\r\n\r\n        console.log(\"how many post containers: \",postWrappers.length)\r\n        for(let i = 0; i < postWrappers.length; i++) {\r\n            let post = {user: '', timestamp: '', text:[], img: []};\r\n            const postImages = postWrappers[i].getElementsByTagName('img');\r\n            const postParagraphs = postWrappers[i].getElementsByTagName( 'p');\r\n\r\n            //get username name and timestamp from post\r\n            const username = postWrappers[i].getElementsByClassName('fwb fcg').item(0);\r\n            console.log(username)\r\n\r\n            const timestamp = postWrappers[i].getElementsByClassName('timestampContent')[0].textContent;\r\n            post.timestamp = timestamp;\r\n\r\n            //if post has paragraphs, iterate over each and push to text array in post object\r\n            for(let j=0; j < postParagraphs.length; j++){\r\n                post.text.push(postParagraphs[j].textContent);\r\n            }\r\n            //if post has images, iterate over each and push to image array in post object\r\n            if(postImages.length > 0){\r\n                for(let k=0; k < postImages.length; k++){\r\n                    const image = postImages.item(k);\r\n                    const imagesToIgnore = \"Image may contain: possible text that says 'Shop Now'\";\r\n                    if(image.getAttribute('alt')!== imagesToIgnore){\r\n                        post.img.push(image.getAttribute('src'));\r\n                    }\r\n                }\r\n            }\r\n            postsArray.push(post);\r\n        }\r\n        console.log(\"returning postsArray\");\r\n        return postsArray\r\n    }\r\n    else{\r\n        console.log(\"response failed\");\r\n        return []\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}