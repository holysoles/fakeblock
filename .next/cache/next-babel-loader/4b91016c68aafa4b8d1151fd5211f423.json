{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport axios from 'axios';\nimport React from \"react\";\nimport fetch from \"node-fetch\";\nexport default function GetFBID(pagename) {\n  var fbID, jsdom, JSDOM, pageUrl, profileResponse, profileHtml, profileDom, profileDoc, metas, _iterator, _step, meta;\n\n  return _regeneratorRuntime.async(function GetFBID$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fbID = '';\n          jsdom = require(\"jsdom\");\n          JSDOM = jsdom.JSDOM;\n          console.log(pagename); //construct and fetch pageurl\n\n          pageUrl = \"https://www.facebook.com/\" + pagename;\n          console.log(\"requesting page: \", pageUrl);\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(fetch(pageUrl));\n\n        case 8:\n          profileResponse = _context.sent;\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(profileResponse.text());\n\n        case 11:\n          profileHtml = _context.sent;\n          profileDom = new JSDOM(profileHtml);\n          profileDoc = profileDom.window.document;\n          metas = profileDoc.getElementsByTagName(\"meta\");\n          console.log(metas); //get id from meta tags for redirecting to ios app\n\n          _iterator = _createForOfIteratorHelper(metas);\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              meta = _step.value;\n\n              if (meta.attributes[0].value === \"al:ios:url\") {\n                //replace text if business page\n                fbID = meta.attributes[1].value.replace('fb://page/?id=', ''); //replace text if profile page\n\n                fbID = fbID.replace('fb://profile/?id=', '');\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          console.log(fbID);\n          return _context.abrupt(\"return\", fbID);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/components/GetFBID.js"],"names":["axios","React","fetch","GetFBID","pagename","fbID","jsdom","require","JSDOM","console","log","pageUrl","profileResponse","text","profileHtml","profileDom","profileDoc","window","document","metas","getElementsByTagName","meta","attributes","value","replace"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AAEA,eAAe,SAAeC,OAAf,CAAuBC,QAAvB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACPC,UAAAA,IADO,GACA,EADA;AAGLC,UAAAA,KAHK,GAGGC,OAAO,CAAC,OAAD,CAHV;AAIHC,UAAAA,KAJG,GAIOF,KAJP,CAIHE,KAJG;AAMXC,UAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ,EANW,CAOX;;AACMO,UAAAA,OARK,GAQK,8BAA8BP,QARnC;AASXK,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCC,OAAjC;AATW;AAAA,2CAUiBT,KAAK,CAACS,OAAD,CAVtB;;AAAA;AAUPC,UAAAA,eAVO;AAAA;AAAA,2CAWaA,eAAe,CAACC,IAAhB,EAXb;;AAAA;AAWPC,UAAAA,WAXO;AAYPC,UAAAA,UAZO,GAYM,IAAIP,KAAJ,CAAUM,WAAV,CAZN;AAaPE,UAAAA,UAbO,GAaMD,UAAU,CAACE,MAAX,CAAkBC,QAbxB;AAcPC,UAAAA,KAdO,GAcCH,UAAU,CAACI,oBAAX,CAAgC,MAAhC,CAdD;AAeXX,UAAAA,OAAO,CAACC,GAAR,CAAYS,KAAZ,EAfW,CAgBX;;AAhBW,iDAiBOA,KAjBP;;AAAA;AAiBX,gEAAwB;AAAdE,cAAAA,IAAc;;AACpB,kBAAGA,IAAI,CAACC,UAAL,CAAgB,CAAhB,EAAmBC,KAAnB,KAA6B,YAAhC,EAA6C;AACzC;AACAlB,gBAAAA,IAAI,GAAGgB,IAAI,CAACC,UAAL,CAAgB,CAAhB,EAAmBC,KAAnB,CAAyBC,OAAzB,CAAiC,gBAAjC,EAAkD,EAAlD,CAAP,CAFyC,CAGzC;;AACAnB,gBAAAA,IAAI,GAAGA,IAAI,CAACmB,OAAL,CAAa,mBAAb,EAAiC,EAAjC,CAAP;AACH;AACJ;AAxBU;AAAA;AAAA;AAAA;AAAA;;AAyBXf,UAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAzBW,2CA2BJA,IA3BI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport React from \"react\";\r\nimport fetch from \"node-fetch\"\r\n\r\nexport default async function GetFBID(pagename){\r\n    let fbID = '';\r\n\r\n    const jsdom = require(\"jsdom\");\r\n    const { JSDOM } = jsdom;\r\n\r\n    console.log(pagename);\r\n    //construct and fetch pageurl\r\n    const pageUrl = \"https://www.facebook.com/\" + pagename;\r\n    console.log(\"requesting page: \", pageUrl);\r\n    let profileResponse = await fetch(pageUrl);\r\n    let profileHtml = await profileResponse.text();\r\n    let profileDom = new JSDOM(profileHtml);\r\n    let profileDoc = profileDom.window.document;\r\n    let metas = profileDoc.getElementsByTagName(\"meta\");\r\n    console.log(metas)\r\n    //get id from meta tags for redirecting to ios app\r\n    for(const meta of metas){\r\n        if(meta.attributes[0].value === \"al:ios:url\"){\r\n            //replace text if business page\r\n            fbID = meta.attributes[1].value.replace('fb://page/?id=','');\r\n            //replace text if profile page\r\n            fbID = fbID.replace('fb://profile/?id=','');\r\n        }\r\n    }\r\n    console.log(fbID);\r\n\r\n    return fbID\r\n}"]},"metadata":{},"sourceType":"module"}