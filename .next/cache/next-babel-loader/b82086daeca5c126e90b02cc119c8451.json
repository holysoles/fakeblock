{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Patrick\\\\PhpstormProjects\\\\fakeblock\\\\pages\\\\fb\\\\public\\\\[search].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Header from \"../../../components/Header\"; //import fetch from 'node-fetch'\n\nimport axios from 'axios';\nexport async function getServerSideProps() {\n  //make and await axios request on public search page\n  let query = \"Patrick\";\n\n  if (query === undefined) {\n    return;\n  }\n\n  console.log(\"searchquery: \", query);\n  const searchUrl = 'https://www.facebook.com/public/' + query;\n  let header = {\n    'Access-Control-Allow-Origin': '*',\n    'Content-Type': 'multipart/form-data'\n  };\n  let res = await axios.get(searchUrl);\n  let htmlText = await res.data; //Need parser import for server side rendering\n\n  var DomParser = require('dom-parser');\n\n  var parser = new DomParser();\n  var dom = parser.parseFromString(htmlText);\n\n  if (dom !== null) {\n    //Results list is hidden element on Dom as string (lazy loading?) need to parse\n    var hiddenElements = dom.getElementsByClassName('hidden_elem');\n    var listText1 = hiddenElements[1].childNodes[0].childNodes[1].innerHTML;\n    var listText2 = hiddenElements[4].childNodes[0].childNodes[1].innerHTML;\n    var resultsContainer1 = parser.parseFromString(listText1);\n    var resultsContainer2 = parser.parseFromString(listText2);\n    let resultsArray1 = resultsContainer1.getElementsByClassName(\"_4bl7 _3-90\");\n    let resultsArray2 = resultsContainer2.getElementsByClassName(\"_4bl7 _3-90\");\n    let resultsArray = resultsArray1.concat(resultsArray2);\n    let results = [];\n\n    for (const result of resultsArray) {\n      let name = result.childNodes[0].attributes[0].value;\n      let link = result.childNodes[0].attributes[6].value; //make get request to get facebook id from link\n\n      let profileResponse = await axios.get(link, {\n        withCredentials: false\n      });\n      let profileHtml = profileResponse.data;\n      let profileDom = parser.parseFromString(profileHtml); //console.log(profileDom)\n\n      let metas = profileDom.getElementsByTagName(\"meta\"); //get id from meta tags for redirecting to ios app\n\n      let facebookId;\n\n      for (const meta of metas) {\n        if (meta.attributes[0].value === \"al:ios:url\") {\n          facebookId = meta.attributes[1].value.replace('fb://profile/', '');\n        }\n      }\n\n      results.push({\n        name: name,\n        link: link,\n        id: facebookId\n      });\n      console.log(\"next result\");\n    }\n\n    return {\n      props: {\n        results\n      }\n    };\n  }\n}\n\nconst Page = ({\n  results\n}) => {\n  const router = useRouter(); //iterate through array of result objects to make list\n\n  const resultsList = results.map(result => {\n    let resultName = result.name;\n    let resultLink = result.link;\n    let resultId = result.id; //let resultImage = \"/imgs/\"+ resultId +\".jpg\";\n\n    let resultImage = 'grap';\n    console.log(resultImage);\n    return __jsx(\"li\", {\n      key: resultLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      src: resultImage,\n      width: \"72\",\n      height: \"72\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }), __jsx(\"a\", {\n      href: resultLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, resultName));\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, \"Search Results:\"), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, resultsList)));\n};\n\nexport default Page;","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/pages/fb/public/[search].js"],"names":["React","useRouter","Header","axios","getServerSideProps","query","undefined","console","log","searchUrl","header","res","get","htmlText","data","DomParser","require","parser","dom","parseFromString","hiddenElements","getElementsByClassName","listText1","childNodes","innerHTML","listText2","resultsContainer1","resultsContainer2","resultsArray1","resultsArray2","resultsArray","concat","results","result","name","attributes","value","link","profileResponse","withCredentials","profileHtml","profileDom","metas","getElementsByTagName","facebookId","meta","replace","push","id","props","Page","router","resultsList","map","resultName","resultLink","resultId","resultImage"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useRouter } from 'next/router';\r\nimport Header from \"../../../components/Header\";\r\n//import fetch from 'node-fetch'\r\nimport axios from 'axios'\r\n\r\nexport async function getServerSideProps() {\r\n    //make and await axios request on public search page\r\n    let query = \"Patrick\";\r\n    if(query === undefined){\r\n        return\r\n    }\r\n    console.log(\"searchquery: \",query)\r\n    const searchUrl = 'https://www.facebook.com/public/'+ query;\r\n\r\n    let header = {\r\n        'Access-Control-Allow-Origin':'*',\r\n        'Content-Type': 'multipart/form-data'\r\n    };\r\n\r\n    let res = await axios.get(searchUrl);\r\n    let htmlText = await res.data;\r\n    //Need parser import for server side rendering\r\n    var DomParser = require('dom-parser');\r\n    var parser = new DomParser();\r\n    var dom = parser.parseFromString(htmlText);\r\n    if(dom !== null){\r\n        //Results list is hidden element on Dom as string (lazy loading?) need to parse\r\n        var hiddenElements = dom.getElementsByClassName('hidden_elem');\r\n        var listText1 = hiddenElements[1].childNodes[0].childNodes[1].innerHTML;\r\n        var listText2 = hiddenElements[4].childNodes[0].childNodes[1].innerHTML;\r\n        var resultsContainer1 = parser.parseFromString(listText1);\r\n        var resultsContainer2 = parser.parseFromString(listText2);\r\n        let resultsArray1 = resultsContainer1.getElementsByClassName(\"_4bl7 _3-90\");\r\n        let resultsArray2 = resultsContainer2.getElementsByClassName(\"_4bl7 _3-90\");\r\n        let resultsArray = resultsArray1.concat(resultsArray2);\r\n        let results = [];\r\n        for(const result of resultsArray){\r\n            let name =result.childNodes[0].attributes[0].value;\r\n            let link = result.childNodes[0].attributes[6].value;\r\n\r\n            //make get request to get facebook id from link\r\n            let profileResponse = await axios.get(link, {withCredentials: false});\r\n            let profileHtml = profileResponse.data;\r\n            let profileDom = parser.parseFromString(profileHtml);\r\n            //console.log(profileDom)\r\n            let metas = profileDom.getElementsByTagName(\"meta\");\r\n\r\n            //get id from meta tags for redirecting to ios app\r\n            let facebookId;\r\n            for(const meta of metas){\r\n                if(meta.attributes[0].value === \"al:ios:url\"){\r\n                    facebookId = meta.attributes[1].value.replace('fb://profile/','')\r\n                }\r\n            }\r\n            results.push({name: name, link: link, id: facebookId});\r\n            console.log(\"next result\");\r\n        }\r\n        return{props: {results}}\r\n    }\r\n}\r\n\r\n\r\n\r\nconst Page = ({results}) => {\r\n    const router = useRouter();\r\n\r\n    //iterate through array of result objects to make list\r\n    const resultsList = results.map((result) => {\r\n        let resultName = result.name;\r\n        let resultLink = result.link;\r\n        let resultId = result.id;\r\n        //let resultImage = \"/imgs/\"+ resultId +\".jpg\";\r\n        let resultImage = 'grap'\r\n        console.log(resultImage)\r\n\r\n\r\n        return(\r\n            <li key={resultLink}>\r\n                <img src={resultImage} width=\"72\" height=\"72\"/>\r\n                <a href={resultLink}>{resultName}</a>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div>\r\n                <div>Search Results:</div>\r\n                <ul>\r\n                    {resultsList}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Page;"]},"metadata":{},"sourceType":"module"}