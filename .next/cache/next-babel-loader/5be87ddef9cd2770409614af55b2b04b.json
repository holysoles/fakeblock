{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport fetch from \"node-fetch\";\nimport { Headers } from \"node-fetch\";\nimport GetFBID from \"../GetFBID\";\nimport GetTrueVideoSource from \"./GetTrueVideoSource\";\nexport default function GetPosts(page) {\n  var jsdom, JSDOM, dom, document, postsArray, fbID, jsonUrl, timelineCursor, params, headers, opts, fullUrl, res, resText, rawJson, postsJson, rawHtml, postsDoc, postWrappers, i, post, postImages, postParagraphs, usernameWrapper, username, timestamp, j, k, image, imagesToIgnore, postHasVideo, videoSource, embeddedVideo, trueSource;\n  return _regeneratorRuntime.async(function GetPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          jsdom = require(\"jsdom\");\n          JSDOM = jsdom.JSDOM;\n          dom = new JSDOM();\n          document = dom.window.document;\n          postsArray = [];\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(GetFBID(page));\n\n        case 7:\n          fbID = _context.sent;\n          jsonUrl = 'https://www.facebook.com/pages_reaction_units/more/?'; //timeline cursor appears to set where posts get request starts from\n\n          timelineCursor = \"%7B%22timeline_cursor%22%3A%22AQHRoDgKgwnQmRz8-7LyXTbs8467llbU4E2FkvBASG8-CkOTDUtCxL2Rbx\" + \"_u0_cGtwwSP-aOXMsTVCNr62TMoNdjl0EmuzWGBCNQrxeyKxMb4hQQMNqhGGJtLN8VYY5vIYUR%22%2C%22timeline_section_cursor%22\" + \"%3Anull%2C%22has_next_page%22%3Atrue%7D\";\n          params = {\n            'surface': 'www_pages_posts',\n            'unit_count': '4',\n            //sets how many posts to get\n            '__a': '1'\n          };\n          headers = new Headers({\n            'User-Agent': \"PostmanRuntime/7.24.1\"\n          });\n          opts = {\n            method: 'GET',\n            headers: headers,\n            redirect: 'follow'\n          };\n          fullUrl = jsonUrl + 'page_id=' + fbID + \"&cursor=\" + timelineCursor + '&' + new URLSearchParams(params);\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(fetch(fullUrl, opts));\n\n        case 16:\n          res = _context.sent;\n\n          if (!res.ok) {\n            _context.next = 55;\n            break;\n          }\n\n          console.log(\"response okay\"); //need to get html updates from json response\n\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(res.text());\n\n        case 21:\n          resText = _context.sent;\n          rawJson = resText.replace(\"for (;;);\", \"\");\n          postsJson = JSON.parse(rawJson);\n          rawHtml = postsJson.domops[0][3].__html; //construct doc from raw html string and get post wrapper elements into html collection\n\n          postsDoc = document.createElement('html');\n          postsDoc.innerHTML = rawHtml; //get posts elements from html doc\n\n          postWrappers = postsDoc.getElementsByClassName(\"_5pcr userContentWrapper\"); //console.log(\"how many post containers: \", postWrappers.length)\n\n          i = 0;\n\n        case 29:\n          if (!(i < postWrappers.length)) {\n            _context.next = 52;\n            break;\n          }\n\n          //construct post object\n          post = {\n            user: '',\n            timestamp: '',\n            text: [],\n            images: [],\n            video: ''\n          };\n          postImages = postWrappers[i].getElementsByTagName('img');\n          postParagraphs = postWrappers[i].getElementsByTagName('p'); //get username name, timestamp from post\n\n          usernameWrapper = postWrappers[i].getElementsByClassName('fwb').item(0);\n          username = usernameWrapper.textContent;\n          post.user = username;\n          timestamp = postWrappers[i].getElementsByClassName('timestampContent')[0].textContent;\n          post.timestamp = timestamp; //if post has paragraphs, iterate over each and push to text array in post object\n\n          for (j = 0; j < postParagraphs.length; j++) {\n            post.text.push(postParagraphs[j].textContent);\n          } //if post has images, iterate over each and push to image array in post object\n\n\n          if (postImages.length > 0) {\n            for (k = 0; k < postImages.length; k++) {\n              image = postImages.item(k);\n              imagesToIgnore = \"Image may contain: possible text that says 'Shop Now'\";\n\n              if (image.getAttribute('alt') !== imagesToIgnore) {\n                post.images.push(image.getAttribute('src'));\n              }\n            }\n          } //if post has a video, grab source and set video property in post object\n\n\n          postHasVideo = postWrappers[i].querySelectorAll(\"a[aria-label~='Video,']\");\n\n          if (!(postHasVideo.length > 0)) {\n            _context.next = 48;\n            break;\n          }\n\n          videoSource = postHasVideo[0].attributes.ajaxify.value;\n          embeddedVideo = \"https://www.facebook.com\" + videoSource;\n          _context.next = 46;\n          return _regeneratorRuntime.awrap(GetTrueVideoSource(this.props.source));\n\n        case 46:\n          trueSource = _context.sent;\n          post.video = embeddedVideo;\n\n        case 48:\n          postsArray.push(post);\n\n        case 49:\n          i++;\n          _context.next = 29;\n          break;\n\n        case 52:\n          return _context.abrupt(\"return\", postsArray);\n\n        case 55:\n          console.log(\"response failed\");\n          return _context.abrupt(\"return\", []);\n\n        case 57:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, this, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/components/Posts/GetPosts.js"],"names":["React","fetch","Headers","GetFBID","GetTrueVideoSource","GetPosts","page","jsdom","require","JSDOM","dom","document","window","postsArray","fbID","jsonUrl","timelineCursor","params","headers","opts","method","redirect","fullUrl","URLSearchParams","res","ok","console","log","text","resText","rawJson","replace","postsJson","JSON","parse","rawHtml","domops","__html","postsDoc","createElement","innerHTML","postWrappers","getElementsByClassName","i","length","post","user","timestamp","images","video","postImages","getElementsByTagName","postParagraphs","usernameWrapper","item","username","textContent","j","push","k","image","imagesToIgnore","getAttribute","postHasVideo","querySelectorAll","videoSource","attributes","ajaxify","value","embeddedVideo","props","source","trueSource"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,eAAe,SAAeC,QAAf,CAAwBC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AACLC,UAAAA,KADK,GACGC,OAAO,CAAC,OAAD,CADV;AAEJC,UAAAA,KAFI,GAEKF,KAFL,CAEJE,KAFI;AAGLC,UAAAA,GAHK,GAGC,IAAID,KAAJ,EAHD;AAILE,UAAAA,QAJK,GAIMD,GAAG,CAACE,MAAJ,CAAWD,QAJjB;AAKPE,UAAAA,UALO,GAKM,EALN;AAAA;AAAA,2CAOQV,OAAO,CAACG,IAAD,CAPf;;AAAA;AAOLQ,UAAAA,IAPK;AAQLC,UAAAA,OARK,GAQK,sDARL,EASX;;AACMC,UAAAA,cAVK,GAUY,6FACnB,+GADmB,GAEnB,yCAZO;AAaLC,UAAAA,MAbK,GAaI;AACX,uBAAW,iBADA;AAEX,0BAAc,GAFH;AAEQ;AACnB,mBAAO;AAHI,WAbJ;AAkBLC,UAAAA,OAlBK,GAkBK,IAAIhB,OAAJ,CAAY;AAAC,0BAAc;AAAf,WAAZ,CAlBL;AAmBLiB,UAAAA,IAnBK,GAmBE;AACTC,YAAAA,MAAM,EAAE,KADC;AAETF,YAAAA,OAAO,EAAEA,OAFA;AAGTG,YAAAA,QAAQ,EAAE;AAHD,WAnBF;AAwBLC,UAAAA,OAxBK,GAwBKP,OAAO,GAAG,UAAV,GAAuBD,IAAvB,GAA8B,UAA9B,GAA2CE,cAA3C,GAA4D,GAA5D,GAAkE,IAAIO,eAAJ,CAAoBN,MAApB,CAxBvE;AAAA;AAAA,2CA0BOhB,KAAK,CAACqB,OAAD,EAAUH,IAAV,CA1BZ;;AAAA;AA0BLK,UAAAA,GA1BK;;AAAA,eA2BPA,GAAG,CAACC,EA3BG;AAAA;AAAA;AAAA;;AA4BPC,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EA5BO,CA6BP;;AA7BO;AAAA,2CA8BeH,GAAG,CAACI,IAAJ,EA9Bf;;AAAA;AA8BDC,UAAAA,OA9BC;AA+BDC,UAAAA,OA/BC,GA+BSD,OAAO,CAACE,OAAR,CAAgB,WAAhB,EAA6B,EAA7B,CA/BT;AAgCDC,UAAAA,SAhCC,GAgCWC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAhCX;AAiCDK,UAAAA,OAjCC,GAiCSH,SAAS,CAACI,MAAV,CAAiB,CAAjB,EAAoB,CAApB,EAAuBC,MAjChC,EAkCP;;AACMC,UAAAA,QAnCC,GAmCU3B,QAAQ,CAAC4B,aAAT,CAAuB,MAAvB,CAnCV;AAoCPD,UAAAA,QAAQ,CAACE,SAAT,GAAqBL,OAArB,CApCO,CAqCP;;AACMM,UAAAA,YAtCC,GAsCcH,QAAQ,CAACI,sBAAT,CAAgC,0BAAhC,CAtCd,EAwCP;;AACSC,UAAAA,CAzCF,GAyCM,CAzCN;;AAAA;AAAA,gBAyCSA,CAAC,GAAGF,YAAY,CAACG,MAzC1B;AAAA;AAAA;AAAA;;AA0CH;AACIC,UAAAA,IA3CD,GA2CQ;AAACC,YAAAA,IAAI,EAAE,EAAP;AAAWC,YAAAA,SAAS,EAAE,EAAtB;AAA0BnB,YAAAA,IAAI,EAAE,EAAhC;AAAoCoB,YAAAA,MAAM,EAAE,EAA5C;AAAgDC,YAAAA,KAAK,EAAE;AAAvD,WA3CR;AA4CGC,UAAAA,UA5CH,GA4CgBT,YAAY,CAACE,CAAD,CAAZ,CAAgBQ,oBAAhB,CAAqC,KAArC,CA5ChB;AA6CGC,UAAAA,cA7CH,GA6CoBX,YAAY,CAACE,CAAD,CAAZ,CAAgBQ,oBAAhB,CAAqC,GAArC,CA7CpB,EA+CH;;AACME,UAAAA,eAhDH,GAgDqBZ,YAAY,CAACE,CAAD,CAAZ,CAAgBD,sBAAhB,CAAuC,KAAvC,EAA8CY,IAA9C,CAAmD,CAAnD,CAhDrB;AAiDGC,UAAAA,QAjDH,GAiDcF,eAAe,CAACG,WAjD9B;AAkDHX,UAAAA,IAAI,CAACC,IAAL,GAAYS,QAAZ;AACMR,UAAAA,SAnDH,GAmDeN,YAAY,CAACE,CAAD,CAAZ,CAAgBD,sBAAhB,CAAuC,kBAAvC,EAA2D,CAA3D,EAA8Dc,WAnD7E;AAoDHX,UAAAA,IAAI,CAACE,SAAL,GAAiBA,SAAjB,CApDG,CAsDH;;AACA,eAASU,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGL,cAAc,CAACR,MAAnC,EAA2Ca,CAAC,EAA5C,EAAgD;AAC5CZ,YAAAA,IAAI,CAACjB,IAAL,CAAU8B,IAAV,CAAeN,cAAc,CAACK,CAAD,CAAd,CAAkBD,WAAjC;AACH,WAzDE,CA0DH;;;AACA,cAAIN,UAAU,CAACN,MAAX,GAAoB,CAAxB,EAA2B;AACvB,iBAASe,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGT,UAAU,CAACN,MAA/B,EAAuCe,CAAC,EAAxC,EAA4C;AAClCC,cAAAA,KADkC,GAC1BV,UAAU,CAACI,IAAX,CAAgBK,CAAhB,CAD0B;AAElCE,cAAAA,cAFkC,GAEjB,uDAFiB;;AAGxC,kBAAID,KAAK,CAACE,YAAN,CAAmB,KAAnB,MAA8BD,cAAlC,EAAkD;AAC9ChB,gBAAAA,IAAI,CAACG,MAAL,CAAYU,IAAZ,CAAiBE,KAAK,CAACE,YAAN,CAAmB,KAAnB,CAAjB;AACH;AACJ;AACJ,WAnEE,CAoEH;;;AACMC,UAAAA,YArEH,GAqEkBtB,YAAY,CAACE,CAAD,CAAZ,CAAgBqB,gBAAhB,CAAiC,yBAAjC,CArElB;;AAAA,gBAsEAD,YAAY,CAACnB,MAAb,GAAsB,CAtEtB;AAAA;AAAA;AAAA;;AAuEOqB,UAAAA,WAvEP,GAuEqBF,YAAY,CAAC,CAAD,CAAZ,CAAgBG,UAAhB,CAA2BC,OAA3B,CAAmCC,KAvExD;AAwEOC,UAAAA,aAxEP,GAwEuB,6BAA6BJ,WAxEpD;AAAA;AAAA,2CAyE0B7D,kBAAkB,CAAC,KAAKkE,KAAL,CAAWC,MAAZ,CAzE5C;;AAAA;AAyEOC,UAAAA,UAzEP;AA0EC3B,UAAAA,IAAI,CAACI,KAAL,GAAcoB,aAAd;;AA1ED;AA4EHxD,UAAAA,UAAU,CAAC6C,IAAX,CAAgBb,IAAhB;;AA5EG;AAyCkCF,UAAAA,CAAC,EAzCnC;AAAA;AAAA;;AAAA;AAAA,2CA8EA9B,UA9EA;;AAAA;AAgFPa,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAhFO,2CAiFA,EAjFA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import React from \"react\";\r\nimport fetch from \"node-fetch\"\r\nimport {Headers} from \"node-fetch\";\r\nimport GetFBID from \"../GetFBID\";\r\nimport GetTrueVideoSource from \"./GetTrueVideoSource\";\r\n\r\nexport default async function GetPosts(page) {\r\n    const jsdom = require(\"jsdom\");\r\n    const {JSDOM} = jsdom;\r\n    const dom = new JSDOM();\r\n    const document = dom.window.document;\r\n    let postsArray = [];\r\n\r\n    const fbID = await GetFBID(page);\r\n    const jsonUrl = 'https://www.facebook.com/pages_reaction_units/more/?';\r\n    //timeline cursor appears to set where posts get request starts from\r\n    const timelineCursor = \"%7B%22timeline_cursor%22%3A%22AQHRoDgKgwnQmRz8-7LyXTbs8467llbU4E2FkvBASG8-CkOTDUtCxL2Rbx\" +\r\n        \"_u0_cGtwwSP-aOXMsTVCNr62TMoNdjl0EmuzWGBCNQrxeyKxMb4hQQMNqhGGJtLN8VYY5vIYUR%22%2C%22timeline_section_cursor%22\" +\r\n        \"%3Anull%2C%22has_next_page%22%3Atrue%7D\";\r\n    const params = {\r\n        'surface': 'www_pages_posts',\r\n        'unit_count': '4', //sets how many posts to get\r\n        '__a': '1'\r\n    };\r\n    const headers = new Headers({'User-Agent': \"PostmanRuntime/7.24.1\"});\r\n    const opts = {\r\n        method: 'GET',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n    };\r\n    const fullUrl = jsonUrl + 'page_id=' + fbID + \"&cursor=\" + timelineCursor + '&' + new URLSearchParams(params);\r\n\r\n    const res = await fetch(fullUrl, opts);\r\n    if (res.ok) {\r\n        console.log(\"response okay\");\r\n        //need to get html updates from json response\r\n        const resText = await res.text();\r\n        const rawJson = resText.replace(\"for (;;);\", \"\");\r\n        const postsJson = JSON.parse(rawJson);\r\n        const rawHtml = postsJson.domops[0][3].__html;\r\n        //construct doc from raw html string and get post wrapper elements into html collection\r\n        const postsDoc = document.createElement('html');\r\n        postsDoc.innerHTML = rawHtml;\r\n        //get posts elements from html doc\r\n        const postWrappers = postsDoc.getElementsByClassName(\"_5pcr userContentWrapper\");\r\n\r\n        //console.log(\"how many post containers: \", postWrappers.length)\r\n        for (let i = 0; i < postWrappers.length; i++) {\r\n            //construct post object\r\n            let post = {user: '', timestamp: '', text: [], images: [], video: ''};\r\n            const postImages = postWrappers[i].getElementsByTagName('img');\r\n            const postParagraphs = postWrappers[i].getElementsByTagName('p');\r\n\r\n            //get username name, timestamp from post\r\n            const usernameWrapper = postWrappers[i].getElementsByClassName('fwb').item(0);\r\n            const username = usernameWrapper.textContent;\r\n            post.user = username;\r\n            const timestamp = postWrappers[i].getElementsByClassName('timestampContent')[0].textContent;\r\n            post.timestamp = timestamp;\r\n\r\n            //if post has paragraphs, iterate over each and push to text array in post object\r\n            for (let j = 0; j < postParagraphs.length; j++) {\r\n                post.text.push(postParagraphs[j].textContent);\r\n            }\r\n            //if post has images, iterate over each and push to image array in post object\r\n            if (postImages.length > 0) {\r\n                for (let k = 0; k < postImages.length; k++) {\r\n                    const image = postImages.item(k);\r\n                    const imagesToIgnore = \"Image may contain: possible text that says 'Shop Now'\";\r\n                    if (image.getAttribute('alt') !== imagesToIgnore) {\r\n                        post.images.push(image.getAttribute('src'));\r\n                    }\r\n                }\r\n            }\r\n            //if post has a video, grab source and set video property in post object\r\n            const postHasVideo = postWrappers[i].querySelectorAll(\"a[aria-label~='Video,']\");\r\n            if(postHasVideo.length > 0){\r\n                const videoSource = postHasVideo[0].attributes.ajaxify.value;\r\n                const embeddedVideo = \"https://www.facebook.com\" + videoSource;\r\n                const trueSource = await GetTrueVideoSource(this.props.source);\r\n                post.video = (embeddedVideo)\r\n            }\r\n            postsArray.push(post);\r\n        }\r\n        return postsArray\r\n    } else {\r\n        console.log(\"response failed\");\r\n        return []\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}