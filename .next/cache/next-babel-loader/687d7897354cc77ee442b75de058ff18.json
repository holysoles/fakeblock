{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Patrick\\\\PhpstormProjects\\\\fakeblock\\\\pages\\\\fb\\\\public\\\\[search].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Header from \"../../../components/Header\"; //import fetch from 'node-fetch'\n\nimport axios from 'axios';\n\nconst Page = ({}) => {\n  const router = useRouter();\n\n  async function getServerSideProps() {\n    //setup query\n    let query = router.query.search;\n\n    if (query === undefined) {\n      return;\n    } //make and await axios request on public search page\n\n\n    console.log(\"searchquery: \", query);\n    const searchUrl = 'https://www.facebook.com/public/' + query;\n    let res = await axios.get(searchUrl);\n    let htmlText = await res.data; //Need parser import for server side rendering\n\n    var DomParser = require('dom-parser');\n\n    var parser = new DomParser();\n    var dom = parser.parseFromString(htmlText);\n\n    if (dom !== null) {\n      //Results list is hidden element on Dom as string (lazy loading?) need to parse\n      var hiddenElements = dom.getElementsByClassName('hidden_elem');\n      var listText1 = hiddenElements[1].childNodes[0].childNodes[1].innerHTML;\n      var listText2 = hiddenElements[4].childNodes[0].childNodes[1].innerHTML;\n      var resultsContainer1 = parser.parseFromString(listText1);\n      var resultsContainer2 = parser.parseFromString(listText2);\n      let resultsArray1 = resultsContainer1.getElementsByClassName(\"_4bl7 _3-90\");\n      let resultsArray2 = resultsContainer2.getElementsByClassName(\"_4bl7 _3-90\");\n      let resultsArray = resultsArray1.concat(resultsArray2);\n      let results = [];\n      let profilepic;\n\n      for (const result of resultsArray) {\n        let name = result.childNodes[0].attributes[0].value;\n        let link = result.childNodes[0].attributes[6].value; //check if fbid is in link before making request\n\n        let haveId = false;\n        let facebookId = '';\n        let profileUrl = link.replace('https://www.facebook.com/', '');\n\n        if (profileUrl.includes(\"people\")) {\n          facebookId = profileUrl.split('/')[2];\n          haveId = true;\n        } //Since no id, make get request to get facebook id from profile page\n\n\n        if (!haveId) {\n          let profileResponse = await axios.get(link, {\n            withCredentials: false\n          });\n          let profileHtml = profileResponse.data;\n          let profileDom = parser.parseFromString(profileHtml);\n          let metas = profileDom.getElementsByTagName(\"meta\"); //get id from meta tags for redirecting to ios app\n\n          for (const meta of metas) {\n            if (meta.attributes[0].value === \"al:ios:url\") {\n              facebookId = meta.attributes[1].value.replace('fb://profile/', '');\n              haveId = true;\n            }\n          }\n        }\n\n        results.push({\n          name: name,\n          link: link,\n          id: facebookId\n        });\n        console.log(facebookId);\n        console.log(\"next result\"); //save image from fb url\n\n        if (haveId) {\n          let picUrl = 'http://graph.facebook.com/' + facebookId + '/picture?type=square';\n          console.log(picUrl); //profilepic = await axios.get(picUrl);\n          //console.log(profilepic)\n        }\n      }\n\n      return {\n        props: {\n          results\n        }\n      };\n    }\n  } //iterate through array of result objects to make list\n\n\n  const resultsList = this.props.results.map(result => {\n    let resultName = result.name;\n    let resultLink = result.link;\n    let resultId = result.id; //if resultID === '' then no profile pic available due to rate limiting\n    //let resultImage = \"/imgs/\"+ resultId +\".jpg\";\n\n    let resultImage = '';\n\n    if (resultId !== '') {\n      resultImage = 'http://graph.facebook.com/' + resultId + '/picture?type=square';\n    }\n\n    return __jsx(\"li\", {\n      key: resultLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      src: resultImage,\n      width: \"72\",\n      height: \"72\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }), __jsx(\"a\", {\n      href: resultLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, resultName));\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, __jsx(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, \"Search results for: \", __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 44\n    }\n  }, router.query.search))), __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, resultsList)));\n};\n\nexport default Page;","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/pages/fb/public/[search].js"],"names":["React","useRouter","Header","axios","Page","router","getServerSideProps","query","search","undefined","console","log","searchUrl","res","get","htmlText","data","DomParser","require","parser","dom","parseFromString","hiddenElements","getElementsByClassName","listText1","childNodes","innerHTML","listText2","resultsContainer1","resultsContainer2","resultsArray1","resultsArray2","resultsArray","concat","results","profilepic","result","name","attributes","value","link","haveId","facebookId","profileUrl","replace","includes","split","profileResponse","withCredentials","profileHtml","profileDom","metas","getElementsByTagName","meta","push","id","picUrl","props","resultsList","map","resultName","resultLink","resultId","resultImage"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useRouter } from 'next/router';\r\nimport Header from \"../../../components/Header\";\r\n//import fetch from 'node-fetch'\r\nimport axios from 'axios'\r\n\r\n\r\nconst Page = ({}) => {\r\n    const router = useRouter();\r\n\r\n    async function getServerSideProps() {\r\n        //setup query\r\n        let query = router.query.search;\r\n        if(query === undefined){\r\n            return\r\n        }\r\n        //make and await axios request on public search page\r\n        console.log(\"searchquery: \",query)\r\n        const searchUrl = 'https://www.facebook.com/public/'+ query;\r\n        let res = await axios.get(searchUrl);\r\n        let htmlText = await res.data;\r\n        //Need parser import for server side rendering\r\n        var DomParser = require('dom-parser');\r\n        var parser = new DomParser();\r\n        var dom = parser.parseFromString(htmlText);\r\n        if(dom !== null){\r\n            //Results list is hidden element on Dom as string (lazy loading?) need to parse\r\n            var hiddenElements = dom.getElementsByClassName('hidden_elem');\r\n            var listText1 = hiddenElements[1].childNodes[0].childNodes[1].innerHTML;\r\n            var listText2 = hiddenElements[4].childNodes[0].childNodes[1].innerHTML;\r\n            var resultsContainer1 = parser.parseFromString(listText1);\r\n            var resultsContainer2 = parser.parseFromString(listText2);\r\n            let resultsArray1 = resultsContainer1.getElementsByClassName(\"_4bl7 _3-90\");\r\n            let resultsArray2 = resultsContainer2.getElementsByClassName(\"_4bl7 _3-90\");\r\n            let resultsArray = resultsArray1.concat(resultsArray2);\r\n            let results = [];\r\n            let profilepic;\r\n            for(const result of resultsArray){\r\n                let name =result.childNodes[0].attributes[0].value;\r\n                let link = result.childNodes[0].attributes[6].value;\r\n\r\n                //check if fbid is in link before making request\r\n                let haveId = false;\r\n                let facebookId = '';\r\n                let profileUrl = link.replace('https://www.facebook.com/','');\r\n                if(profileUrl.includes(\"people\")){\r\n                    facebookId = profileUrl.split('/')[2];\r\n                    haveId = true;\r\n                }\r\n                //Since no id, make get request to get facebook id from profile page\r\n                if(!haveId){\r\n                    let profileResponse = await axios.get(link, {withCredentials: false});\r\n                    let profileHtml = profileResponse.data;\r\n                    let profileDom = parser.parseFromString(profileHtml);\r\n                    let metas = profileDom.getElementsByTagName(\"meta\");\r\n                    //get id from meta tags for redirecting to ios app\r\n                    for(const meta of metas){\r\n                        if(meta.attributes[0].value === \"al:ios:url\"){\r\n                            facebookId = meta.attributes[1].value.replace('fb://profile/','')\r\n                            haveId = true;\r\n                        }\r\n                    }\r\n                }\r\n                results.push({name: name, link: link, id: facebookId});\r\n                console.log(facebookId)\r\n                console.log(\"next result\");\r\n\r\n                //save image from fb url\r\n                if(haveId){\r\n                    let picUrl = 'http://graph.facebook.com/'+ facebookId +'/picture?type=square';\r\n                    console.log(picUrl)\r\n                    //profilepic = await axios.get(picUrl);\r\n                    //console.log(profilepic)\r\n                }\r\n            }\r\n            return{props: {results}}\r\n        }\r\n    }\r\n\r\n    //iterate through array of result objects to make list\r\n    const resultsList = this.props.results.map((result) => {\r\n        let resultName = result.name;\r\n        let resultLink = result.link;\r\n        let resultId = result.id;\r\n        //if resultID === '' then no profile pic available due to rate limiting\r\n        //let resultImage = \"/imgs/\"+ resultId +\".jpg\";\r\n        let resultImage = '';\r\n        if(resultId !== ''){\r\n            resultImage = 'http://graph.facebook.com/'+ resultId +'/picture?type=square'\r\n        }\r\n\r\n        return(\r\n            <li key={resultLink}>\r\n                <img src={resultImage} width=\"72\" height=\"72\"/>\r\n                <a href={resultLink}>{resultName}</a>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div>\r\n                <div>\r\n                    <p>Search results for: <a>{router.query.search}</a></p>\r\n                </div>\r\n                <ul>\r\n                    {resultsList}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Page;"]},"metadata":{},"sourceType":"module"}