{"ast":null,"code":"import React from \"react\";\nimport fetch from \"node-fetch\";\nimport { Headers } from \"node-fetch\";\nimport GetFBID from \"../GetFBID\";\nexport default async function GetPhotos(page) {\n  let albumList = [];\n  const fbID = await GetFBID(page);\n  const variables = \"{'count':30,'pageID':'\" + fbID + \"'}\";\n  var myHeaders = new Headers();\n  myHeaders.append(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\");\n  myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n  var urlencoded = new URLSearchParams();\n  urlencoded.append(\"variables\", variables);\n  urlencoded.append(\"doc_id\", \"2386959101363343\");\n  var requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: urlencoded,\n    redirect: 'follow'\n  };\n  const res = await fetch(\"https://www.facebook.com/api/graphql/\", requestOptions);\n\n  if (res.ok) {\n    console.log(\"response okay\");\n    const resJson = await res.json();\n    const resPhotoList = resJson.data.page['posted_photos'].edges;\n\n    for (let i = 0; i < resPhotoList.length; i++) {\n      let albumName = resPhotoList[i].node.name;\n      let albumLink = resPhotoList[i].node.albumList.push(photoSource);\n    }\n\n    return photoArray;\n  } else {\n    console.log(\"response failed\");\n    return [];\n  }\n}","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/components/Photos/GetAlbumLinks.js"],"names":["React","fetch","Headers","GetFBID","GetPhotos","page","albumList","fbID","variables","myHeaders","append","urlencoded","URLSearchParams","requestOptions","method","headers","body","redirect","res","ok","console","log","resJson","json","resPhotoList","data","edges","i","length","albumName","node","name","albumLink","push","photoSource","photoArray"],"mappings":"AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,eAAe,eAAeC,SAAf,CAAyBC,IAAzB,EAA+B;AAC1C,MAAIC,SAAS,GAAG,EAAhB;AACA,QAAMC,IAAI,GAAG,MAAMJ,OAAO,CAACE,IAAD,CAA1B;AAEA,QAAMG,SAAS,GAAG,2BAA2BD,IAA3B,GAAkC,IAApD;AAEA,MAAIE,SAAS,GAAG,IAAIP,OAAJ,EAAhB;AACAO,EAAAA,SAAS,CAACC,MAAV,CAAiB,YAAjB,EAA+B,qHAA/B;AACAD,EAAAA,SAAS,CAACC,MAAV,CAAiB,cAAjB,EAAiC,mCAAjC;AACA,MAAIC,UAAU,GAAG,IAAIC,eAAJ,EAAjB;AACAD,EAAAA,UAAU,CAACD,MAAX,CAAkB,WAAlB,EAA+BF,SAA/B;AACAG,EAAAA,UAAU,CAACD,MAAX,CAAkB,QAAlB,EAA4B,kBAA5B;AACA,MAAIG,cAAc,GAAG;AACjBC,IAAAA,MAAM,EAAE,MADS;AAEjBC,IAAAA,OAAO,EAAEN,SAFQ;AAGjBO,IAAAA,IAAI,EAAEL,UAHW;AAIjBM,IAAAA,QAAQ,EAAE;AAJO,GAArB;AAMA,QAAMC,GAAG,GAAG,MAAMjB,KAAK,CAAC,uCAAD,EAA0CY,cAA1C,CAAvB;;AAEA,MAAIK,GAAG,CAACC,EAAR,EAAY;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,UAAMC,OAAO,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAtB;AACA,UAAMC,YAAY,GAAGF,OAAO,CAACG,IAAR,CAAapB,IAAb,CAAkB,eAAlB,EAAmCqB,KAAxD;;AACA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,YAAY,CAACI,MAAhC,EAAwCD,CAAC,EAAzC,EAA4C;AACxC,UAAIE,SAAS,GAAGL,YAAY,CAACG,CAAD,CAAZ,CAAgBG,IAAhB,CAAqBC,IAArC;AACA,UAAIC,SAAS,GAAGR,YAAY,CAACG,CAAD,CAAZ,CAAgBG,IAAhB,CAChBxB,SADgB,CACN2B,IADM,CACDC,WADC,CAAhB;AAEH;;AACD,WAAOC,UAAP;AACH,GAVD,MAUO;AACHf,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAO,EAAP;AACH;AACJ","sourcesContent":["\r\n\r\nimport React from \"react\";\r\nimport fetch from \"node-fetch\"\r\nimport {Headers} from \"node-fetch\";\r\nimport GetFBID from \"../GetFBID\";\r\n\r\nexport default async function GetPhotos(page) {\r\n    let albumList = [];\r\n    const fbID = await GetFBID(page);\r\n\r\n    const variables = \"{'count':30,'pageID':'\" + fbID + \"'}\";\r\n\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"user-agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36\");\r\n    myHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n    var urlencoded = new URLSearchParams();\r\n    urlencoded.append(\"variables\", variables);\r\n    urlencoded.append(\"doc_id\", \"2386959101363343\");\r\n    var requestOptions = {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: urlencoded,\r\n        redirect: 'follow'\r\n    };\r\n    const res = await fetch(\"https://www.facebook.com/api/graphql/\", requestOptions);\r\n\r\n    if (res.ok) {\r\n        console.log(\"response okay\");\r\n        const resJson = await res.json();\r\n        const resPhotoList = resJson.data.page['posted_photos'].edges;\r\n        for(let i = 0; i < resPhotoList.length; i++){\r\n            let albumName = resPhotoList[i].node.name;\r\n            let albumLink = resPhotoList[i].node.\r\n            albumList.push(photoSource);\r\n        }\r\n        return photoArray\r\n    } else {\r\n        console.log(\"response failed\");\r\n        return []\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}