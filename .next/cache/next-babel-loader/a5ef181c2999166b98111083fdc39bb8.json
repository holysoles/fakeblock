{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Patrick\\\\PhpstormProjects\\\\fakeblock\\\\components\\\\Posts\\\\MakePosts.js\";\nvar __jsx = React.createElement;\nimport MakeAvatar from \"./MakeAvatar\";\nimport React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport MakeVideoPlayer from \"./MakeVideoPlayer\";\nimport MakeGallery from \"../Photos/MakeGallery\";\nimport Linkify from 'linkifyjs/react';\nimport linkifyHTML from 'linkifyjs/html';\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 750,\n    'margin': '4%'\n  }\n});\nexport default function MakePosts(postsArray) {\n  const classes = useStyles();\n  const postsList = postsArray.map(post => {\n    let Avatar = MakeAvatar('/');\n    const paragraphs = post.text.map((paragraph, index) => {\n      //look for link in paragraph text to create hyperlink\n      paragraph = __jsx(Linkify, {\n        tagName: \"span\",\n        options: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }\n      }, paragraph);\n      return __jsx(Typography, {\n        variant: \"body2\",\n        component: \"p\",\n        key: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 17\n        }\n      }, paragraph);\n    });\n    let images = post.images.map(source => {\n      //if image is avatar\n      if (source.includes('t1.0-1')) {\n        Avatar = MakeAvatar(source, post.user);\n      } else {\n        return source;\n      }\n    }); //remove profile pic from image array\n\n    let media = __jsx(MakeGallery, {\n      images: images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }\n    }); //if there is a video post, overwrite thumbnail with video player component\n\n\n    if (post.video.length > 0) {\n      media = __jsx(MakeVideoPlayer, {\n        source: post.video,\n        thumb: post.images[1],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      });\n    }\n\n    return __jsx(Card, {\n      key: post.timestamp,\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, media, __jsx(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, Avatar, __jsx(Typography, {\n      gutterBottom: true,\n      variant: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 29\n      }\n    }, post.user)), __jsx(Typography, {\n      gutterBottom: true,\n      variant: \"body2\",\n      color: \"textSecondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }, post.timestamp), paragraphs), __jsx(CardActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }\n    }, __jsx(Button, {\n      size: \"small\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 25\n      }\n    }, \"Share\"), __jsx(Button, {\n      size: \"small\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }\n    }, \"Likes\")));\n  });\n  return postsList;\n}","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/components/Posts/MakePosts.js"],"names":["MakeAvatar","React","Card","CardContent","Typography","CardActions","Button","makeStyles","MakeVideoPlayer","MakeGallery","Linkify","linkifyHTML","useStyles","root","maxWidth","MakePosts","postsArray","classes","postsList","map","post","Avatar","paragraphs","text","paragraph","index","images","source","includes","user","media","video","length","timestamp"],"mappings":"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","sourcesContent":["import MakeAvatar from \"./MakeAvatar\";\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MakeVideoPlayer from \"./MakeVideoPlayer\";\r\nimport MakeGallery from \"../Photos/MakeGallery\";\r\nimport Linkify from 'linkifyjs/react';\r\nimport linkifyHTML from 'linkifyjs/html';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 750,\r\n        'margin': '4%',\r\n    },\r\n});\r\n\r\nexport default function MakePosts(postsArray) {\r\n    const classes = useStyles();\r\n\r\n    const postsList = postsArray.map((post) => {\r\n        let Avatar = MakeAvatar('/');\r\n        const paragraphs = post.text.map((paragraph, index) => {\r\n\r\n            //look for link in paragraph text to create hyperlink\r\n            paragraph = <Linkify tagName=\"span\" options>{paragraph}</Linkify>;\r\n\r\n            return (\r\n                <Typography variant=\"body2\" component=\"p\" key={index}>\r\n                    {paragraph}\r\n                </Typography>\r\n            )\r\n        });\r\n        let images = post.images.map((source) => {\r\n            //if image is avatar\r\n            if (source.includes('t1.0-1')) {\r\n                Avatar = MakeAvatar(source, post.user)\r\n            }\r\n            else {\r\n                return source\r\n            }\r\n        });\r\n        //remove profile pic from image array\r\n        let media = <MakeGallery images={images}/>;\r\n        //if there is a video post, overwrite thumbnail with video player component\r\n        if(post.video.length > 0){\r\n            media = <MakeVideoPlayer source={post.video} thumb={post.images[1]} />\r\n        }\r\n\r\n        return (\r\n                <Card key={post.timestamp} className={classes.root}>\r\n                    {media}\r\n                    <CardContent>\r\n                        <div>\r\n                            {Avatar}\r\n                            <Typography gutterBottom variant=\"h6\">\r\n                                {post.user}\r\n                            </Typography>\r\n                        </div>\r\n                        <Typography gutterBottom variant=\"body2\" color=\"textSecondary\">\r\n                            {post.timestamp}\r\n                        </Typography>\r\n                        {paragraphs}\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button size=\"small\" color=\"primary\">\r\n                            Share\r\n                        </Button>\r\n                        <Button size=\"small\" color=\"primary\">\r\n                            Likes\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n        )\r\n    });\r\n    return postsList\r\n}\r\n"]},"metadata":{},"sourceType":"module"}