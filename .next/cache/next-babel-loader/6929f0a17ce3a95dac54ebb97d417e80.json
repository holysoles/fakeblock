{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Patrick\\\\PhpstormProjects\\\\fakeblock\\\\pages\\\\fb\\\\public\\\\[search].js\";\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(n); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport { useRouter } from 'next/router';\nimport Header from \"../../../components/Header\"; //import fetch from 'node-fetch'\n\nimport axios from 'axios';\n\nvar Page = function Page(_ref) {\n  var results = _ref.results;\n  var router = useRouter();\n\n  function getServerSideProps() {\n    var query, searchUrl, res, htmlText, DomParser, parser, dom, hiddenElements, listText1, listText2, resultsContainer1, resultsContainer2, resultsArray1, resultsArray2, resultsArray, _results, profilepic, _iterator, _step, result, name, link, haveId, facebookId, profileUrl, profileResponse, profileHtml, profileDom, metas, _iterator2, _step2, meta, picUrl;\n\n    return _regeneratorRuntime.async(function getServerSideProps$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            //setup query\n            query = router.query.search;\n\n            if (!(query === undefined)) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            //make and await axios request on public search page\n            console.log(\"searchquery: \", query);\n            searchUrl = 'https://www.facebook.com/public/' + query;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(axios.get(searchUrl));\n\n          case 7:\n            res = _context.sent;\n            _context.next = 10;\n            return _regeneratorRuntime.awrap(res.data);\n\n          case 10:\n            htmlText = _context.sent;\n            //Need parser import for server side rendering\n            DomParser = require('dom-parser');\n            parser = new DomParser();\n            dom = parser.parseFromString(htmlText);\n\n            if (!(dom !== null)) {\n              _context.next = 59;\n              break;\n            }\n\n            //Results list is hidden element on Dom as string (lazy loading?) need to parse\n            hiddenElements = dom.getElementsByClassName('hidden_elem');\n            listText1 = hiddenElements[1].childNodes[0].childNodes[1].innerHTML;\n            listText2 = hiddenElements[4].childNodes[0].childNodes[1].innerHTML;\n            resultsContainer1 = parser.parseFromString(listText1);\n            resultsContainer2 = parser.parseFromString(listText2);\n            resultsArray1 = resultsContainer1.getElementsByClassName(\"_4bl7 _3-90\");\n            resultsArray2 = resultsContainer2.getElementsByClassName(\"_4bl7 _3-90\");\n            resultsArray = resultsArray1.concat(resultsArray2);\n            _results = [];\n            _iterator = _createForOfIteratorHelper(resultsArray);\n            _context.prev = 25;\n\n            _iterator.s();\n\n          case 27:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 50;\n              break;\n            }\n\n            result = _step.value;\n            name = result.childNodes[0].attributes[0].value;\n            link = result.childNodes[0].attributes[6].value; //check if fbid is in link before making request\n\n            haveId = false;\n            facebookId = '';\n            profileUrl = link.replace('https://www.facebook.com/', '');\n\n            if (profileUrl.includes(\"people\")) {\n              facebookId = profileUrl.split('/')[2];\n              haveId = true;\n            } //Since no id, make get request to get facebook id from profile page\n\n\n            if (haveId) {\n              _context.next = 44;\n              break;\n            }\n\n            _context.next = 38;\n            return _regeneratorRuntime.awrap(axios.get(link, {\n              withCredentials: false\n            }));\n\n          case 38:\n            profileResponse = _context.sent;\n            profileHtml = profileResponse.data;\n            profileDom = parser.parseFromString(profileHtml);\n            metas = profileDom.getElementsByTagName(\"meta\"); //get id from meta tags for redirecting to ios app\n\n            _iterator2 = _createForOfIteratorHelper(metas);\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                meta = _step2.value;\n\n                if (meta.attributes[0].value === \"al:ios:url\") {\n                  facebookId = meta.attributes[1].value.replace('fb://profile/', '');\n                  haveId = true;\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n\n          case 44:\n            _results.push({\n              name: name,\n              link: link,\n              id: facebookId\n            });\n\n            console.log(facebookId);\n            console.log(\"next result\"); //save image from fb url\n\n            if (haveId) {\n              picUrl = 'http://graph.facebook.com/' + facebookId + '/picture?type=square';\n              console.log(picUrl); //profilepic = await axios.get(picUrl);\n              //console.log(profilepic)\n            }\n\n          case 48:\n            _context.next = 27;\n            break;\n\n          case 50:\n            _context.next = 55;\n            break;\n\n          case 52:\n            _context.prev = 52;\n            _context.t0 = _context[\"catch\"](25);\n\n            _iterator.e(_context.t0);\n\n          case 55:\n            _context.prev = 55;\n\n            _iterator.f();\n\n            return _context.finish(55);\n\n          case 58:\n            return _context.abrupt(\"return\", {\n              props: {\n                results: _results\n              }\n            });\n\n          case 59:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[25, 52, 55, 58]], Promise);\n  } //iterate through array of result objects to make list\n\n\n  var resultsList = results.map(function (result) {\n    var resultName = result.name;\n    var resultLink = result.link;\n    var resultId = result.id; //if resultID === '' then no profile pic available due to rate limiting\n    //let resultImage = \"/imgs/\"+ resultId +\".jpg\";\n\n    var resultImage = '';\n\n    if (resultId !== '') {\n      resultImage = 'http://graph.facebook.com/' + resultId + '/picture?type=square';\n    }\n\n    return __jsx(\"li\", {\n      key: resultLink,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      src: resultImage,\n      width: \"72\",\n      height: \"72\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }), __jsx(\"a\", {\n      href: resultLink,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, resultName));\n  });\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, __jsx(Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, \"Search results for: \", __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 44\n    }\n  }, router.query.search))), __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, resultsList)));\n};\n\nexport default Page;","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/pages/fb/public/[search].js"],"names":["React","useRouter","Header","axios","Page","results","router","getServerSideProps","query","search","undefined","console","log","searchUrl","get","res","data","htmlText","DomParser","require","parser","dom","parseFromString","hiddenElements","getElementsByClassName","listText1","childNodes","innerHTML","listText2","resultsContainer1","resultsContainer2","resultsArray1","resultsArray2","resultsArray","concat","result","name","attributes","value","link","haveId","facebookId","profileUrl","replace","includes","split","withCredentials","profileResponse","profileHtml","profileDom","metas","getElementsByTagName","meta","push","id","picUrl","props","resultsList","map","resultName","resultLink","resultId","resultImage"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { useRouter } from 'next/router';\r\nimport Header from \"../../../components/Header\";\r\n//import fetch from 'node-fetch'\r\nimport axios from 'axios'\r\n\r\n\r\nconst Page = ({results}) => {\r\n    const router = useRouter();\r\n\r\n    async function getServerSideProps() {\r\n        //setup query\r\n        let query = router.query.search;\r\n        if(query === undefined){\r\n            return\r\n        }\r\n        //make and await axios request on public search page\r\n        console.log(\"searchquery: \",query)\r\n        const searchUrl = 'https://www.facebook.com/public/'+ query;\r\n        let res = await axios.get(searchUrl);\r\n        let htmlText = await res.data;\r\n        //Need parser import for server side rendering\r\n        var DomParser = require('dom-parser');\r\n        var parser = new DomParser();\r\n        var dom = parser.parseFromString(htmlText);\r\n        if(dom !== null){\r\n            //Results list is hidden element on Dom as string (lazy loading?) need to parse\r\n            var hiddenElements = dom.getElementsByClassName('hidden_elem');\r\n            var listText1 = hiddenElements[1].childNodes[0].childNodes[1].innerHTML;\r\n            var listText2 = hiddenElements[4].childNodes[0].childNodes[1].innerHTML;\r\n            var resultsContainer1 = parser.parseFromString(listText1);\r\n            var resultsContainer2 = parser.parseFromString(listText2);\r\n            let resultsArray1 = resultsContainer1.getElementsByClassName(\"_4bl7 _3-90\");\r\n            let resultsArray2 = resultsContainer2.getElementsByClassName(\"_4bl7 _3-90\");\r\n            let resultsArray = resultsArray1.concat(resultsArray2);\r\n            let results = [];\r\n            let profilepic;\r\n            for(const result of resultsArray){\r\n                let name =result.childNodes[0].attributes[0].value;\r\n                let link = result.childNodes[0].attributes[6].value;\r\n\r\n                //check if fbid is in link before making request\r\n                let haveId = false;\r\n                let facebookId = '';\r\n                let profileUrl = link.replace('https://www.facebook.com/','');\r\n                if(profileUrl.includes(\"people\")){\r\n                    facebookId = profileUrl.split('/')[2];\r\n                    haveId = true;\r\n                }\r\n                //Since no id, make get request to get facebook id from profile page\r\n                if(!haveId){\r\n                    let profileResponse = await axios.get(link, {withCredentials: false});\r\n                    let profileHtml = profileResponse.data;\r\n                    let profileDom = parser.parseFromString(profileHtml);\r\n                    let metas = profileDom.getElementsByTagName(\"meta\");\r\n                    //get id from meta tags for redirecting to ios app\r\n                    for(const meta of metas){\r\n                        if(meta.attributes[0].value === \"al:ios:url\"){\r\n                            facebookId = meta.attributes[1].value.replace('fb://profile/','')\r\n                            haveId = true;\r\n                        }\r\n                    }\r\n                }\r\n                results.push({name: name, link: link, id: facebookId});\r\n                console.log(facebookId)\r\n                console.log(\"next result\");\r\n\r\n                //save image from fb url\r\n                if(haveId){\r\n                    let picUrl = 'http://graph.facebook.com/'+ facebookId +'/picture?type=square';\r\n                    console.log(picUrl)\r\n                    //profilepic = await axios.get(picUrl);\r\n                    //console.log(profilepic)\r\n                }\r\n            }\r\n            return{props: {results}}\r\n        }\r\n    }\r\n\r\n    //iterate through array of result objects to make list\r\n    const resultsList = results.map((result) => {\r\n        let resultName = result.name;\r\n        let resultLink = result.link;\r\n        let resultId = result.id;\r\n        //if resultID === '' then no profile pic available due to rate limiting\r\n        //let resultImage = \"/imgs/\"+ resultId +\".jpg\";\r\n        let resultImage = '';\r\n        if(resultId !== ''){\r\n            resultImage = 'http://graph.facebook.com/'+ resultId +'/picture?type=square'\r\n        }\r\n\r\n        return(\r\n            <li key={resultLink}>\r\n                <img src={resultImage} width=\"72\" height=\"72\"/>\r\n                <a href={resultLink}>{resultName}</a>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Header />\r\n            <div>\r\n                <div>\r\n                    <p>Search results for: <a>{router.query.search}</a></p>\r\n                </div>\r\n                <ul>\r\n                    {resultsList}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Page;"]},"metadata":{},"sourceType":"module"}