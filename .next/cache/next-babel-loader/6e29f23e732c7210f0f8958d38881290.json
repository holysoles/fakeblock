{"ast":null,"code":"import React from \"react\";\nimport fetch from \"node-fetch\";\nimport { Headers } from \"node-fetch\";\nimport GetFBID from \"../GetFBID\";\nimport GetTrueVideoSource from \"./GetTrueVideoSource\";\nexport default async function GetPosts(page) {\n  const jsdom = require(\"jsdom\");\n\n  const {\n    JSDOM\n  } = jsdom;\n  const dom = new JSDOM();\n  const document = dom.window.document;\n  let postsArray = [];\n  const fbID = await GetFBID(page);\n  const jsonUrl = 'https://www.facebook.com/pages_reaction_units/more/?'; //timeline cursor appears to set where posts get request starts from\n\n  const timelineCursor = \"%7B%22timeline_cursor%22%3A%22%22%2C%22timeline_section_cursor%22%3Anull%2C%22has_next_page%22%3Atrue%7D\";\n  const params = {\n    'surface': 'www_pages_posts',\n    'unit_count': '12',\n    //sets how many posts to get\n    '__a': '1'\n  };\n  const headers = new Headers({\n    'User-Agent': \"PostmanRuntime/7.24.1\"\n  });\n  const opts = {\n    method: 'GET',\n    headers: headers,\n    redirect: 'follow'\n  };\n  const fullUrl = jsonUrl + 'page_id=' + fbID + \"&cursor=\" + timelineCursor + '&' + new URLSearchParams(params);\n  const res = await fetch(fullUrl, opts);\n\n  if (res.ok) {\n    console.log(\"response okay\"); //need to get html updates from json response\n\n    const resText = await res.text();\n    const rawJson = resText.replace(\"for (;;);\", \"\");\n    const postsJson = JSON.parse(rawJson);\n    const rawHtml = postsJson.domops[0][3].__html; //construct doc from raw html string and get post wrapper elements into html collection\n\n    const postsDoc = document.createElement('html');\n    postsDoc.innerHTML = rawHtml; //get posts elements from html doc\n\n    const postWrappers = postsDoc.getElementsByClassName(\"_5pcr userContentWrapper\"); //console.log(\"how many post containers: \", postWrappers.length)\n\n    for (let i = 0; i < postWrappers.length; i++) {\n      //construct post object\n      let post = {\n        user: '',\n        timestamp: '',\n        text: [],\n        images: [],\n        video: '',\n        link: ''\n      };\n      const postImages = postWrappers[i].getElementsByTagName('img');\n      const postParagraphs = postWrappers[i].getElementsByTagName('p'); //get username name, timestamp from post\n\n      const usernameWrapper = postWrappers[i].getElementsByClassName('fwb').item(0);\n      const username = usernameWrapper.textContent;\n      post.user = username;\n      const timestamp = postWrappers[i].getElementsByClassName('timestampContent')[0].textContent;\n      post.timestamp = timestamp; //if post has paragraphs, iterate over each and push to text array in post object\n\n      for (let j = 0; j < postParagraphs.length; j++) {\n        post.text.push(postParagraphs[j].textContent);\n      } //if post has images, iterate over each and push to image array in post object\n\n\n      if (postImages.length > 0) {\n        for (let k = 0; k < postImages.length; k++) {\n          const image = postImages.item(k);\n          const imagesToIgnore = \"Image may contain: possible text that says 'Shop Now'\";\n\n          if (image.getAttribute('alt') !== imagesToIgnore) {\n            post.images.push(image.getAttribute('src'));\n          }\n        }\n      }\n\n      let externalLink = postWrappers[i].querySelectorAll(\"a[rel='noopener nofollow']\");\n\n      if (externalLink[0] !== undefined) {\n        if (externalLink[0].href.includes('youtu')) {//ignore\n        } else {\n          //set external link here\n          const rawLink = externalLink[0].href;\n          const encodedURI = rawLink.replace('https://l.facebook.com/l.php?u=', '').split(\"&h=\")[0];\n          const cleanedLink = decodeURIComponent(encodedURI);\n          console.log(cleanedLink);\n          post.link = cleanedLink;\n        }\n      } //if post has a facebook or youtube video, grab source and set video property in post object\n\n\n      let fbVideo = postWrappers[i].querySelectorAll(\"a[aria-label~='Video,']\");\n      let ytVideo = postWrappers[i].querySelectorAll(\"a[href*='youtu']\");\n\n      if (fbVideo.length > 0) {\n        const videoSource = fbVideo[0].ajaxify;\n        const embeddedVideo = \"https://www.facebook.com\" + videoSource; //const trueSource = await GetTrueVideoSource(embeddedVideo);\n\n        post.video = embeddedVideo;\n      }\n\n      if (ytVideo[0] !== undefined) {\n        const strippedYT = ytVideo[0].href.split(\"?u=\")[1].split(\"&h=\")[0];\n        const cleanedYT = strippedYT.replace(/%3A/g, ':').replace(/%2F/g, '/').replace(/%3F/g, '?').replace(/%3D/, '=').replace('watch?v=', 'embed/'); //replace with invidious?\n\n        const invidious = cleanedYT.replace(\"youtu.be\", \"invidio.us/embed\").replace(\"www.youtube.com\", \"invidio.us\");\n        console.log(invidious);\n        post.video = invidious;\n      }\n\n      postsArray.push(post);\n    }\n\n    return postsArray;\n  } else {\n    console.log(\"response failed\");\n    return [];\n  }\n}","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/components/Posts/GetPosts.js"],"names":["React","fetch","Headers","GetFBID","GetTrueVideoSource","GetPosts","page","jsdom","require","JSDOM","dom","document","window","postsArray","fbID","jsonUrl","timelineCursor","params","headers","opts","method","redirect","fullUrl","URLSearchParams","res","ok","console","log","resText","text","rawJson","replace","postsJson","JSON","parse","rawHtml","domops","__html","postsDoc","createElement","innerHTML","postWrappers","getElementsByClassName","i","length","post","user","timestamp","images","video","link","postImages","getElementsByTagName","postParagraphs","usernameWrapper","item","username","textContent","j","push","k","image","imagesToIgnore","getAttribute","externalLink","querySelectorAll","undefined","href","includes","rawLink","encodedURI","split","cleanedLink","decodeURIComponent","fbVideo","ytVideo","videoSource","ajaxify","embeddedVideo","strippedYT","cleanedYT","invidious"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport fetch from \"node-fetch\"\r\nimport {Headers} from \"node-fetch\";\r\nimport GetFBID from \"../GetFBID\";\r\nimport GetTrueVideoSource from \"./GetTrueVideoSource\";\r\n\r\nexport default async function GetPosts(page) {\r\n    const jsdom = require(\"jsdom\");\r\n    const {JSDOM} = jsdom;\r\n    const dom = new JSDOM();\r\n    const document = dom.window.document;\r\n    let postsArray = [];\r\n\r\n    const fbID = await GetFBID(page);\r\n    const jsonUrl = 'https://www.facebook.com/pages_reaction_units/more/?';\r\n    //timeline cursor appears to set where posts get request starts from\r\n    const timelineCursor = \"%7B%22timeline_cursor%22%3A%22%22%2C%22timeline_section_cursor%22%3Anull%2C%22has_next_page%22%3Atrue%7D\";\r\n    const params = {\r\n        'surface': 'www_pages_posts',\r\n        'unit_count': '12', //sets how many posts to get\r\n        '__a': '1'\r\n    };\r\n    const headers = new Headers({'User-Agent': \"PostmanRuntime/7.24.1\"});\r\n    const opts = {\r\n        method: 'GET',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n    };\r\n    const fullUrl = jsonUrl + 'page_id=' + fbID + \"&cursor=\" + timelineCursor + '&' + new URLSearchParams(params);\r\n\r\n    const res = await fetch(fullUrl, opts);\r\n    if (res.ok) {\r\n        console.log(\"response okay\");\r\n        //need to get html updates from json response\r\n        const resText = await res.text();\r\n        const rawJson = resText.replace(\"for (;;);\", \"\");\r\n        const postsJson = JSON.parse(rawJson);\r\n        const rawHtml = postsJson.domops[0][3].__html;\r\n        //construct doc from raw html string and get post wrapper elements into html collection\r\n        const postsDoc = document.createElement('html');\r\n        postsDoc.innerHTML = rawHtml;\r\n        //get posts elements from html doc\r\n        const postWrappers = postsDoc.getElementsByClassName(\"_5pcr userContentWrapper\");\r\n\r\n        //console.log(\"how many post containers: \", postWrappers.length)\r\n        for (let i = 0; i < postWrappers.length; i++) {\r\n            //construct post object\r\n            let post = {user: '', timestamp: '', text: [], images: [], video: '', link: ''};\r\n            const postImages = postWrappers[i].getElementsByTagName('img');\r\n            const postParagraphs = postWrappers[i].getElementsByTagName('p');\r\n\r\n            //get username name, timestamp from post\r\n            const usernameWrapper = postWrappers[i].getElementsByClassName('fwb').item(0);\r\n            const username = usernameWrapper.textContent;\r\n            post.user = username;\r\n            const timestamp = postWrappers[i].getElementsByClassName('timestampContent')[0].textContent;\r\n            post.timestamp = timestamp;\r\n\r\n            //if post has paragraphs, iterate over each and push to text array in post object\r\n            for (let j = 0; j < postParagraphs.length; j++) {\r\n                post.text.push(postParagraphs[j].textContent);\r\n            }\r\n            //if post has images, iterate over each and push to image array in post object\r\n            if (postImages.length > 0) {\r\n                for (let k = 0; k < postImages.length; k++) {\r\n                    const image = postImages.item(k);\r\n                    const imagesToIgnore = \"Image may contain: possible text that says 'Shop Now'\";\r\n                    if (image.getAttribute('alt') !== imagesToIgnore) {\r\n                        post.images.push(image.getAttribute('src'));\r\n                    }\r\n                }\r\n            }\r\n            let externalLink = postWrappers[i].querySelectorAll(\"a[rel='noopener nofollow']\");\r\n            if(externalLink[0] !== undefined){\r\n                if(externalLink[0].href.includes('youtu')){\r\n                    //ignore\r\n                }\r\n                else{\r\n                    //set external link here\r\n                    const rawLink = externalLink[0].href;\r\n                    const encodedURI = rawLink.replace('https://l.facebook.com/l.php?u=','').split(\"&h=\")[0];\r\n                    const cleanedLink = decodeURIComponent(encodedURI);\r\n                    console.log(cleanedLink)\r\n\r\n\r\n\r\n\r\n                    post.link = cleanedLink\r\n\r\n                }\r\n            }\r\n\r\n            //if post has a facebook or youtube video, grab source and set video property in post object\r\n            let fbVideo = postWrappers[i].querySelectorAll(\"a[aria-label~='Video,']\");\r\n\r\n            let ytVideo = postWrappers[i].querySelectorAll(\"a[href*='youtu']\");\r\n            if (fbVideo.length > 0){\r\n                const videoSource = fbVideo[0].ajaxify;\r\n                const embeddedVideo = \"https://www.facebook.com\" + videoSource;\r\n                //const trueSource = await GetTrueVideoSource(embeddedVideo);\r\n                post.video = (embeddedVideo)\r\n            }\r\n            if(ytVideo[0] !== undefined){\r\n                const strippedYT = ytVideo[0].href.split(\"?u=\")[1].split(\"&h=\")[0];\r\n                const cleanedYT = strippedYT.replace(/%3A/g,':').replace(/%2F/g,'/').replace(/%3F/g,'?').replace(/%3D/,'=').replace('watch?v=','embed/');\r\n                //replace with invidious?\r\n                const invidious = cleanedYT.replace(\"youtu.be\",\"invidio.us/embed\").replace(\"www.youtube.com\",\"invidio.us\");\r\n                console.log(invidious);\r\n\r\n                post.video = invidious;\r\n            }\r\n            postsArray.push(post);\r\n        }\r\n        return postsArray\r\n    } else {\r\n        console.log(\"response failed\");\r\n        return []\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}