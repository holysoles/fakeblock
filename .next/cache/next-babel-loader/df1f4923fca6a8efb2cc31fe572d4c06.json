{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport fetch from \"node-fetch\";\nimport { Headers } from \"node-fetch\";\nimport GetFBID from \"../GetFBID\";\nimport GetTrueVideoSource from \"./GetTrueVideoSource\";\nexport default function GetPosts(page) {\n  var jsdom, JSDOM, dom, document, postsArray, fbID, jsonUrl, timelineCursor, params, headers, opts, fullUrl, res, resText, rawJson, postsJson, rawHtml, postsDoc, postWrappers, i, post, usernameWrapper, username, timestamp, postParagraphsCollection, imageText, postParagraphs, j, postImages, k, image, imagesToIgnore, externalLink, rawLink, encodedURI, cleanedLink, fbVideo, ytVideo, videoSource, embeddedVideo, strippedYT, cleanedYT, invidious;\n  return _regeneratorRuntime.async(function GetPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          jsdom = require(\"jsdom\");\n          JSDOM = jsdom.JSDOM;\n          dom = new JSDOM();\n          document = dom.window.document;\n          postsArray = [];\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(GetFBID(page));\n\n        case 7:\n          fbID = _context.sent;\n          jsonUrl = 'https://www.facebook.com/pages_reaction_units/more/?'; //timeline cursor appears to set where posts get request starts from\n\n          timelineCursor = \"%7B%22timeline_cursor%22%3A%22%22%2C%22timeline_section_cursor%22%3Anull%2C%22has_next_page%22%3Atrue%7D\";\n          params = {\n            'surface': 'www_pages_posts',\n            'unit_count': '12',\n            //sets how many posts to get\n            '__a': '1'\n          };\n          headers = new Headers({\n            'User-Agent': \"PostmanRuntime/7.24.1\"\n          });\n          opts = {\n            method: 'GET',\n            headers: headers,\n            redirect: 'follow'\n          };\n          fullUrl = jsonUrl + 'page_id=' + fbID + \"&cursor=\" + timelineCursor + '&' + new URLSearchParams(params);\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(fetch(fullUrl, opts));\n\n        case 16:\n          res = _context.sent;\n\n          if (!res.ok) {\n            _context.next = 32;\n            break;\n          }\n\n          console.log(\"response okay\"); //need to get html updates from json response\n\n          _context.next = 21;\n          return _regeneratorRuntime.awrap(res.text());\n\n        case 21:\n          resText = _context.sent;\n          rawJson = resText.replace(\"for (;;);\", \"\");\n          postsJson = JSON.parse(rawJson);\n          rawHtml = postsJson.domops[0][3].__html; //construct doc from raw html string and get post wrapper elements into html collection\n\n          postsDoc = document.createElement('html');\n          postsDoc.innerHTML = rawHtml; //get posts elements from html doc\n\n          postWrappers = postsDoc.getElementsByClassName(\"_5pcr userContentWrapper\"); //console.log(\"how many post containers: \", postWrappers.length)\n\n          for (i = 0; i < postWrappers.length; i++) {\n            //construct post object\n            post = {\n              user: '',\n              timestamp: '',\n              text: [],\n              images: [],\n              video: '',\n              link: ''\n            }; //get username name, timestamp from post\n\n            usernameWrapper = postWrappers[i].getElementsByClassName('fwb').item(0);\n            username = usernameWrapper.textContent;\n            post.user = username;\n            timestamp = postWrappers[i].getElementsByClassName('timestampContent')[0].textContent;\n            post.timestamp = timestamp; //get post paragraphs, iterate over each and push to text array in post object\n\n            postParagraphsCollection = postWrappers[i].getElementsByTagName('p');\n            imageText = postWrappers[i].querySelectorAll(\"span[style*='text-align:center;align-self:auto']\");\n            postParagraphs = Array.prototype.slice.apply(postParagraphsCollection); //imageText for posts with text on top of image background\n\n            if (Array.from(imageText).length > 0) {\n              postParagraphs = postParagraphs.concat(Array.from(imageText)[0]);\n            }\n\n            for (j = 0; j < postParagraphs.length; j++) {\n              console.log(\"paragraph: \", postParagraphs[j]);\n              post.text.push(postParagraphs[j].textContent);\n            } //if post has images, iterate over each and push to image array in post object\n\n\n            postImages = postWrappers[i].getElementsByTagName('img');\n\n            if (postImages.length > 0) {\n              for (k = 0; k < postImages.length; k++) {\n                image = postImages.item(k);\n                imagesToIgnore = \"Image may contain: possible text that says 'Shop Now'\";\n\n                if (image.getAttribute('alt') !== imagesToIgnore) {\n                  post.images.push(image.getAttribute('src'));\n                }\n              }\n            }\n\n            externalLink = postWrappers[i].querySelectorAll(\"a[rel='noopener nofollow']\");\n\n            if (externalLink[0] !== undefined) {\n              if (externalLink[0].href.includes('youtu')) {//ignore\n              } else {\n                //set external link here\n                rawLink = externalLink[0].href;\n                encodedURI = rawLink.replace('https://l.facebook.com/l.php?u=', '').split(\"&h=\")[0];\n                cleanedLink = decodeURIComponent(encodedURI);\n                post.link = cleanedLink;\n              }\n            } //if post has a facebook or youtube video, grab source and set video property in post object\n\n\n            fbVideo = postWrappers[i].querySelectorAll(\"a[aria-label~='Video,']\");\n            ytVideo = postWrappers[i].querySelectorAll(\"a[href*='youtu']\");\n\n            if (fbVideo.length > 0) {\n              videoSource = fbVideo[0].ajaxify;\n              embeddedVideo = \"https://www.facebook.com\" + videoSource; //const trueSource = await GetTrueVideoSource(embeddedVideo);\n\n              post.video = embeddedVideo;\n            }\n\n            if (ytVideo[0] !== undefined) {\n              strippedYT = ytVideo[0].href.split(\"?u=\")[1].split(\"&h=\")[0];\n              cleanedYT = strippedYT.replace(/%3A/g, ':').replace(/%2F/g, '/').replace(/%3F/g, '?').replace(/%3D/, '=').replace('watch?v=', 'embed/'); //replace with invidious?\n\n              invidious = cleanedYT.replace(\"youtu.be\", \"invidio.us/embed\").replace(\"www.youtube.com\", \"invidio.us\");\n              console.log(invidious);\n              post.video = invidious;\n            }\n\n            postsArray.push(post);\n          }\n\n          return _context.abrupt(\"return\", postsArray);\n\n        case 32:\n          console.log(\"response failed\");\n          return _context.abrupt(\"return\", []);\n\n        case 34:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/components/Posts/GetPosts.js"],"names":["React","fetch","Headers","GetFBID","GetTrueVideoSource","GetPosts","page","jsdom","require","JSDOM","dom","document","window","postsArray","fbID","jsonUrl","timelineCursor","params","headers","opts","method","redirect","fullUrl","URLSearchParams","res","ok","console","log","text","resText","rawJson","replace","postsJson","JSON","parse","rawHtml","domops","__html","postsDoc","createElement","innerHTML","postWrappers","getElementsByClassName","i","length","post","user","timestamp","images","video","link","usernameWrapper","item","username","textContent","postParagraphsCollection","getElementsByTagName","imageText","querySelectorAll","postParagraphs","Array","prototype","slice","apply","from","concat","j","push","postImages","k","image","imagesToIgnore","getAttribute","externalLink","undefined","href","includes","rawLink","encodedURI","split","cleanedLink","decodeURIComponent","fbVideo","ytVideo","videoSource","ajaxify","embeddedVideo","strippedYT","cleanedYT","invidious"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport fetch from \"node-fetch\"\r\nimport {Headers} from \"node-fetch\";\r\nimport GetFBID from \"../GetFBID\";\r\nimport GetTrueVideoSource from \"./GetTrueVideoSource\";\r\n\r\nexport default async function GetPosts(page) {\r\n    const jsdom = require(\"jsdom\");\r\n    const {JSDOM} = jsdom;\r\n    const dom = new JSDOM();\r\n    const document = dom.window.document;\r\n    let postsArray = [];\r\n\r\n    const fbID = await GetFBID(page);\r\n    const jsonUrl = 'https://www.facebook.com/pages_reaction_units/more/?';\r\n    //timeline cursor appears to set where posts get request starts from\r\n    const timelineCursor = \"%7B%22timeline_cursor%22%3A%22%22%2C%22timeline_section_cursor%22%3Anull%2C%22has_next_page%22%3Atrue%7D\";\r\n    const params = {\r\n        'surface': 'www_pages_posts',\r\n        'unit_count': '12', //sets how many posts to get\r\n        '__a': '1'\r\n    };\r\n    const headers = new Headers({'User-Agent': \"PostmanRuntime/7.24.1\"});\r\n    const opts = {\r\n        method: 'GET',\r\n        headers: headers,\r\n        redirect: 'follow',\r\n    };\r\n    const fullUrl = jsonUrl + 'page_id=' + fbID + \"&cursor=\" + timelineCursor + '&' + new URLSearchParams(params);\r\n\r\n    const res = await fetch(fullUrl, opts);\r\n    if (res.ok) {\r\n        console.log(\"response okay\");\r\n        //need to get html updates from json response\r\n        const resText = await res.text();\r\n        const rawJson = resText.replace(\"for (;;);\", \"\");\r\n        const postsJson = JSON.parse(rawJson);\r\n        const rawHtml = postsJson.domops[0][3].__html;\r\n        //construct doc from raw html string and get post wrapper elements into html collection\r\n        const postsDoc = document.createElement('html');\r\n        postsDoc.innerHTML = rawHtml;\r\n        //get posts elements from html doc\r\n        const postWrappers = postsDoc.getElementsByClassName(\"_5pcr userContentWrapper\");\r\n\r\n        //console.log(\"how many post containers: \", postWrappers.length)\r\n        for (let i = 0; i < postWrappers.length; i++) {\r\n            //construct post object\r\n            let post = {user: '', timestamp: '', text: [], images: [], video: '', link: ''};\r\n\r\n            //get username name, timestamp from post\r\n            const usernameWrapper = postWrappers[i].getElementsByClassName('fwb').item(0);\r\n            const username = usernameWrapper.textContent;\r\n            post.user = username;\r\n            const timestamp = postWrappers[i].getElementsByClassName('timestampContent')[0].textContent;\r\n            post.timestamp = timestamp;\r\n\r\n            //get post paragraphs, iterate over each and push to text array in post object\r\n            const postParagraphsCollection = postWrappers[i].getElementsByTagName('p');\r\n            const imageText = postWrappers[i].querySelectorAll(\"span[style*='text-align:center;align-self:auto']\");\r\n            let postParagraphs = Array.prototype.slice.apply(postParagraphsCollection);\r\n            //imageText for posts with text on top of image background\r\n            if(Array.from(imageText).length > 0){\r\n                postParagraphs = postParagraphs.concat(Array.from(imageText)[0]);\r\n            }\r\n            for (let j = 0; j < postParagraphs.length; j++) {\r\n                console.log(\"paragraph: \",postParagraphs[j]);\r\n                post.text.push(postParagraphs[j].textContent);\r\n            }\r\n\r\n            //if post has images, iterate over each and push to image array in post object\r\n            const postImages = postWrappers[i].getElementsByTagName('img');\r\n            if (postImages.length > 0) {\r\n                for (let k = 0; k < postImages.length; k++) {\r\n                    const image = postImages.item(k);\r\n                    const imagesToIgnore = \"Image may contain: possible text that says 'Shop Now'\";\r\n                    if (image.getAttribute('alt') !== imagesToIgnore) {\r\n                        post.images.push(image.getAttribute('src'));\r\n                    }\r\n                }\r\n            }\r\n            let externalLink = postWrappers[i].querySelectorAll(\"a[rel='noopener nofollow']\");\r\n            if(externalLink[0] !== undefined){\r\n                if(externalLink[0].href.includes('youtu')){\r\n                    //ignore\r\n                }\r\n                else{\r\n                    //set external link here\r\n                    const rawLink = externalLink[0].href;\r\n                    const encodedURI = rawLink.replace('https://l.facebook.com/l.php?u=','').split(\"&h=\")[0];\r\n                    const cleanedLink = decodeURIComponent(encodedURI);\r\n                    post.link = cleanedLink;\r\n                }\r\n            }\r\n\r\n            //if post has a facebook or youtube video, grab source and set video property in post object\r\n            let fbVideo = postWrappers[i].querySelectorAll(\"a[aria-label~='Video,']\");\r\n\r\n            let ytVideo = postWrappers[i].querySelectorAll(\"a[href*='youtu']\");\r\n            if (fbVideo.length > 0){\r\n                const videoSource = fbVideo[0].ajaxify;\r\n                const embeddedVideo = \"https://www.facebook.com\" + videoSource;\r\n                //const trueSource = await GetTrueVideoSource(embeddedVideo);\r\n                post.video = (embeddedVideo)\r\n            }\r\n            if(ytVideo[0] !== undefined){\r\n                const strippedYT = ytVideo[0].href.split(\"?u=\")[1].split(\"&h=\")[0];\r\n                const cleanedYT = strippedYT.replace(/%3A/g,':').replace(/%2F/g,'/').replace(/%3F/g,'?').replace(/%3D/,'=').replace('watch?v=','embed/');\r\n                //replace with invidious?\r\n                const invidious = cleanedYT.replace(\"youtu.be\",\"invidio.us/embed\").replace(\"www.youtube.com\",\"invidio.us\");\r\n                console.log(invidious);\r\n\r\n                post.video = invidious;\r\n            }\r\n            postsArray.push(post);\r\n        }\r\n        return postsArray\r\n    } else {\r\n        console.log(\"response failed\");\r\n        return []\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}