{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport fetch from \"node-fetch\";\nexport default function GetTrueVideoSource(videoUrl) {\n  var myHeaders, requestOptions, res, resText, videoSource;\n  return _regeneratorRuntime.async(function GetTrueVideoSource$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          //fetch video page\n          myHeaders = new Headers();\n          requestOptions = {\n            method: 'GET',\n            headers: myHeaders,\n            redirect: 'follow'\n          };\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(fetch(videoUrl, requestOptions));\n\n        case 4:\n          res = _context.sent;\n          resText = res.text();\n          videoSource = resText.split(\"video:[{url:\\\"\")[1].split(\"\\\",start:0\")[0];\n          console.log(videoSource);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/Patrick/PhpstormProjects/fakeblock/components/Posts/GetTrueVideoSource.js"],"names":["fetch","GetTrueVideoSource","videoUrl","myHeaders","Headers","requestOptions","method","headers","redirect","res","resText","text","videoSource","split","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,YAAlB;AAEA,eAAe,SAAeC,kBAAf,CAAkCC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACX;AACIC,UAAAA,SAFO,GAEK,IAAIC,OAAJ,EAFL;AAIPC,UAAAA,cAJO,GAIU;AACjBC,YAAAA,MAAM,EAAE,KADS;AAEjBC,YAAAA,OAAO,EAAEJ,SAFQ;AAGjBK,YAAAA,QAAQ,EAAE;AAHO,WAJV;AAAA;AAAA,2CAUOR,KAAK,CAACE,QAAD,EAAWG,cAAX,CAVZ;;AAAA;AAULI,UAAAA,GAVK;AAWLC,UAAAA,OAXK,GAWKD,GAAG,CAACE,IAAJ,EAXL;AAYLC,UAAAA,WAZK,GAYSF,OAAO,CAACG,KAAR,CAAc,gBAAd,EAAgC,CAAhC,EAAmCA,KAAnC,CAAyC,YAAzC,EAAuD,CAAvD,CAZT;AAaXC,UAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;;AAbW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import fetch from \"node-fetch\";\r\n\r\nexport default async function GetTrueVideoSource(videoUrl){\r\n    //fetch video page\r\n    var myHeaders = new Headers();\r\n    \r\n    var requestOptions = {\r\n        method: 'GET',\r\n        headers: myHeaders,\r\n        redirect: 'follow'\r\n    };\r\n\r\n    const res = await fetch(videoUrl, requestOptions);\r\n    const resText = res.text();\r\n    const videoSource = resText.split(\"video:[{url:\\\"\")[1].split(\"\\\",start:0\")[0];\r\n    console.log(videoSource)\r\n}"]},"metadata":{},"sourceType":"module"}